{
  "openapi": "3.0.1",
  "info": {
    "title": "RDN API Rest Wrapper",
    "description": " Please paste your staging api key above to test directly in this UI or in any rest app of your choice. <br><br>The staging endpoint is: https://stage-np-api.recoverydatabase.net/rest/ <br><br> The  endpoint will be https://api.recoverydatabase.net/rest/ <br><br>",
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "https://stage-np-api.recoverydatabase.net/rest"
    }
  ],
  "paths": {
    "/acknowledgeAgentDecline": {
      "post": {
        "tags": [
          "acknowledgeAgentDecline"
        ],
        "summary": "Provides the ability to acknowledge a case that has been declined by the repo company.",
        "description": "Provides the ability to acknowledge a case that has been declined by the repo company.",
        "requestBody": {
          "description": "Case IDs",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "case_ids"
                ],
                "properties": {
                  "case_ids": {
                    "$ref": "#/components/schemas/ArrayOfInt",
                    "type": "object"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation: Acknowledge Agent Decline",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessedItemsResponse"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/addAddress": {
      "post": {
        "tags": [
          "addAddress"
        ],
        "summary": "Adds a new address for a case.",
        "description": "Adds a new address for a case.",
        "requestBody": {
          "description": "Case ID and address object to add new address to the case",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "case_id",
                  "addr"
                ],
                "properties": {
                  "case_id": {
                    "maxLength": 11,
                    "type": "integer",
                    "example": 2070817008
                  },
                  "addr": {
                    "type": "object",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Address"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation: Add Address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulOperationString"
                },
                "examples": {
                  "SuccessfulOperationString": {
                    "value": {
                      "result": "123501450"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/addAgentToInvoiceService": {
      "post": {
        "tags": [
          "addAgentToInvoiceService"
        ],
        "summary": "Add Agent to Invoice Service",
        "description": "Adds a base service to an agent. If the service already exists for the agent this will update the existing relationship with the passed rate and tax information If no tax information and rate is passed, this will use the information from base service",
        "requestBody": {
          "description": "Case ID and address object to add new address to the case",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "base_invoice_service_id",
                  "udbsaid",
                  "rate",
                  "taxable"
                ],
                "properties": {
                  "base_invoice_service_id": {
                    "type": "string",
                    "example": 2070817008
                  },
                  "udbsaid": {
                    "type": "string",
                    "example": "90DEMO"
                  },
                  "rate": {
                    "type": "number",
                    "example": 0.07
                  },
                  "taxable": {
                    "type": "boolean",
                    "example": true
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation: addAgentToInvoiceService",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulOperationString"
                },
                "examples": {
                  "SuccessfulOperationBoolean": {
                    "value": {
                      "result": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/deleteAgentToInvoiceService": {
      "post": {
        "tags": [
          "deleteAgentToInvoiceService"
        ],
        "summary": "Delete Agent to Invoice Service",
        "description": "Deletes a base service assigned to an agent",
        "requestBody": {
          "description": "Service ID and udbsaid of agent's service",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "base_invoice_service_id",
                  "udbsaid"
                ],
                "properties": {
                  "base_invoice_service_id": {
                    "type": "string",
                    "example": 2070817008
                  },
                  "udbsaid": {
                    "type": "string",
                    "example": "90DEMO"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation: deleteAgentToInvoiceService",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulOperationString"
                },
                "examples": {
                  "SuccessfulOperationBoolean": {
                    "value": {
                      "result": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/addCase": {
      "post": {
        "tags": [
          "addCase"
        ],
        "summary": "Adds a new case to RDN",
        "description": "Adds a new case to RDN",
        "requestBody": {
          "description": "Case object to add new case to RDN",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Case"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Case Add",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseResponse"
                }
              }
            }
          },
          "400": {
            "description": "400 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/BadCustomField"
                    }
                  ]
                },
                "examples": {
                  "BadCustomField": {
                    "value": {
                      "code": 400,
                      "message": "Bad custom field id: $custom_field->id value: $custom_field->value"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/responses/InvalidCompanyCode"
                    },
                    {
                      "$ref": "#/components/responses/InvalidLenderVendorId"
                    },
                    {
                      "$ref": "#/components/responses/MissingLenderVendorRepoVendor"
                    },
                    {
                      "$ref": "#/components/responses/VendorOutOfService"
                    },
                    {
                      "$ref": "#/components/responses/UnapprovedInactiveVendor"
                    },
                    {
                      "$ref": "#/components/responses/ExistingCase"
                    },
                    {
                      "$ref": "#/components/responses/InactiveLienholder"
                    },
                    {
                      "$ref": "#/components/responses/InvalidLienholderId"
                    },
                    {
                      "$ref": "#/components/responses/InvalidPhoneType"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  },
                  "InvalidCompanyCode": {
                    "value": {
                      "code": 500,
                      "message": "Invalid company code for test"
                    }
                  },
                  "InvalidLenderVendorId": {
                    "value": {
                      "code": 500,
                      "message": "Invalid lender_vendor_id: 123"
                    }
                  },
                  "MissingLenderVendorRepoVendor": {
                    "value": {
                      "code": 500,
                      "message": "Either $lender_vendor_id or $repo_vendor is required"
                    }
                  },
                  "VendorOutOfService": {
                    "value": {
                      "code": 500,
                      "message": "Case can't be created - the vendor is out of service"
                    }
                  },
                  "UnapprovedInactiveVendor": {
                    "value": {
                      "code": 500,
                      "message": "Can only add a case if assigned to an Approved and Active vendor."
                    }
                  },
                  "ExistingCase": {
                    "value": {
                      "code": 500,
                      "message": "Unable to create case - there is an existing active case with the passed account number with the agent."
                    }
                  },
                  "InactiveLienholder": {
                    "value": {
                      "code": 500,
                      "message": "Add case failed: the passed lien holder is inactive"
                    }
                  },
                  "InvalidLienholderId": {
                    "value": {
                      "code": 500,
                      "message": "Invalid lien_holder_id $lien_holder_id"
                    }
                  },
                  "InvalidPhoneType": {
                    "value": {
                      "code": 500,
                      "message": "Invalid phone type"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/addCaseAutoAllocate": {
      "post": {
        "tags": [
          "addCaseAutoAllocate"
        ],
        "summary": "Adds a new case to RDN using auto allocation if enabled",
        "description": "This endpoint adds a case to the RDN tiering engine. It will choose the appropriate vendor according to your tier settings. This can be overridden by passing the appropriate values\nAddtional note - One of Address type  1, 2, 3, 4, 5, 12,16 is required for auto allocation\n",
        "requestBody": {
          "description": "Case object that needs to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseAutoAllocate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Case Add",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseResponseTiered"
                }
              }
            }
          },
          "400": {
            "description": "400 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/DuplicateCase"
                    },
                    {
                      "$ref": "#/components/responses/AddressRequired"
                    },
                    {
                      "$ref": "#/components/responses/TierConfigRequired"
                    }
                  ]
                },
                "examples": {
                  "DuplicateCase": {
                    "value": {
                      "code": 400,
                      "message": "the passed account number already exists, must provide new account number"
                    }
                  },
                  "AddressRequired": {
                    "value": {
                      "code": 400,
                      "message": "addresses is required parameter"
                    }
                  },
                  "TierConfigRequired": {
                    "value": {
                      "code": 400,
                      "message": "tier_configuration_id must be provided when repo_vendor is provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/AutoAllocateDisabled"
                    },
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "AutoAllocateDisabled": {
                    "value": {
                      "code": 401,
                      "message": "Method addCaseAutoAllocate is not enabled for this client"
                    }
                  },
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "409 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnableToAssignVendor"
                    }
                  ]
                },
                "examples": {
                  "UnableToAssignVendor": {
                    "value": {
                      "code": 409,
                      "message": "Unable to assign repo vendor to the case"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/addCaseDocument": {
      "post": {
        "tags": [
          "addCaseDocument"
        ],
        "summary": "Informs us of a URL where to download a case document and place onto a case",
        "description": "Informs us of a URL where to download a case document and place onto a case",
        "requestBody": {
          "description": "Case ID and Document url",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCaseDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Add Case Picture",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulOperation"
                },
                "examples": {
                  "SuccessfulOperation": {
                    "value": {
                      "result": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  },
                  "InvalidUrl": {
                    "value": {
                      "code": 500,
                      "message": "Invalid url"
                    }
                  },
                  "NoUrlItem": {
                    "value": {
                      "code": 500,
                      "message": "No url items found"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/addCaseDocumentData": {
      "post": {
        "tags": [
          "addCaseDocumentData"
        ],
        "summary": "Pass us base64-encoded data representing a case document (we will determine content-type)",
        "description": "Pass us base64-encoded data representing a case document (we will determine content-type)",
        "requestBody": {
          "description": "Case ID, base64-data, file names, and document type defaults to Document Type 1 if not present",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCaseDocumentData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Add Case Document Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulOperation"
                },
                "examples": {
                  "SuccessfulOperation": {
                    "value": {
                      "result": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  },
                  "InvalidUrl": {
                    "value": {
                      "code": 500,
                      "message": "Invalid url"
                    }
                  },
                  "NoUrlItem": {
                    "value": {
                      "code": 500,
                      "message": "No url items found"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/addCasePicture": {
      "post": {
        "tags": [
          "addCasePicture"
        ],
        "summary": "Informs us of a URL where to download a case picture and place onto a case",
        "description": "Informs us of a URL where to download a case picture and place onto a case",
        "requestBody": {
          "description": "Case ID and picture url",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCasePicture"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Add Case Picture",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulOperation"
                },
                "examples": {
                  "SuccessfulOperation": {
                    "value": {
                      "result": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  },
                  "InvalidUrl": {
                    "value": {
                      "code": 500,
                      "message": "Invalid url"
                    }
                  },
                  "NoUrlItem": {
                    "value": {
                      "code": 500,
                      "message": "No url items found"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/addCasePictureData": {
      "post": {
        "tags": [
          "addCasePictureData"
        ],
        "summary": "Pass us base64-encoded data representing a case picture (we will determine content-type)",
        "description": "Pass us base64-encoded data representing a case picture (we will determine content-type)",
        "requestBody": {
          "description": "Case ID, base64-data, file names",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCasePictureData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Add Case Picture Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulOperation"
                },
                "examples": {
                  "SuccessfulOperation": {
                    "value": {
                      "result": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  },
                  "InvalidUrl": {
                    "value": {
                      "code": 500,
                      "message": "Invalid url"
                    }
                  },
                  "NoUrlItem": {
                    "value": {
                      "code": 500,
                      "message": "No url items found"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/addCaseUpdate": {
      "post": {
        "tags": [
          "addCaseUpdate"
        ],
        "summary": "Creates a new case update on a case, 0 if unsuccessful",
        "description": "Creates a new case update on a case, 0 if unsuccessful",
        "requestBody": {
          "description": "Update object that needs to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Add Update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulOperationString"
                },
                "examples": {
                  "SuccessfulOperationString": {
                    "value": {
                      "result": 1188721810
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/responses/NoPermissionToAddUpdates"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  },
                  "NoPermissionToAddUpdates": {
                    "value": {
                      "code": 500,
                      "message": "User 1031677 does not have permission to add updates"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/addInvoiceService": {
      "post": {
        "tags": [
          "addInvoiceService"
        ],
        "summary": "Adds new base invoice services for your company. Pass invoice_client_base_service_id to update existing base service",
        "description": "Adds new base invoice services for your company. Pass invoice_client_base_service_id to update existing base service",
        "requestBody": {
          "description": "Invoice Service",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceClientService"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation: addInvoiceService",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulOperation"
                },
                "examples": {
                  "SuccessfulOperation": {
                    "value": {
                      "result": 1
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/addPhoneNumber": {
      "post": {
        "tags": [
          "addPhoneNumber"
        ],
        "summary": "Add a phone number to a case",
        "description": "Add a phone number to a case",
        "requestBody": {
          "description": "Case ID and Phone Number",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPhoneNumber"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Phone Add",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulOperation"
                },
                "examples": {
                  "SuccessfulOperation": {
                    "value": {
                      "result": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/bulkCloseCases": {
      "post": {
        "tags": [
          "bulkCloseCases"
        ],
        "summary": "Places multiple cases in Pending Close for the vendor to accept in bulk (limit 500)",
        "description": "Places multiple cases in Pending Close for the vendor to accept in bulk (limit 500)",
        "requestBody": {
          "description": "CloseCase object for which the case needs to be closed. Note: Both reason and reason_type cannot be empty",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkCloseCase"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Case Close",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SuccessfulOperation"
                    },
                    {
                      "$ref": "#/components/responses/ReturnLastIdTrue"
                    }
                  ]
                },
                "examples": {
                  "SuccessfulOperation": {
                    "value": {
                      "result": true
                    }
                  },
                  "ReturnLastIdTrue": {
                    "value": {
                      "result": "1960561091"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/responses/UnableToCloseCase"
                    },
                    {
                      "$ref": "#/components/responses/MissingReasonAndReasonType"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  },
                  "UnableToCloseCase": {
                    "value": {
                      "code": 500,
                      "message": "Unable to change the status to Closed because the current status is Pending Close"
                    }
                  },
                  "MissingReasonType": {
                    "value": {
                      "code": 500,
                      "message": "Invalid Reason Type Passed [2].  A valid reason type string, or reason type code must be passed"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/changeCaseOrderType": {
      "post": {
        "tags": [
          "changeCaseOrderType"
        ],
        "summary": "Changes the order type on the case",
        "description": "Changes the order type on the case",
        "requestBody": {
          "description": "Case ID for which order type needs to be changed",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeCaseOrderType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Case Type change",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Case"
                },
                "examples": {
                  "SuccessfulOperation": {
                    "value": {
                      "result": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/changeFeeStatus": {
      "post": {
        "tags": [
          "changeFeeStatus"
        ],
        "summary": "Approve or deny a fee request",
        "description": "Approve or deny a fee request",
        "requestBody": {
          "description": "Case ID, Fee id and Fee approval status of a case",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeFeeStatus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Change Fee Status Type change",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Case"
                },
                "examples": {
                  "SuccessfulOperation": {
                    "value": {
                      "result": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/closeCase": {
      "post": {
        "tags": [
          "closeCase"
        ],
        "summary": "Places a case in Pending Close for the vendor to accept",
        "description": "Places a case in Pending Close if the case is in Open, Need Info, Hold, Pending on Hold or New From Client status",
        "requestBody": {
          "description": "CloseCase object for which the case needs to be closed. Note: Both reason and reason_type cannot be empty",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloseCase"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Case Close",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SuccessfulOperation"
                    },
                    {
                      "$ref": "#/components/responses/ReturnLastIdTrue"
                    }
                  ]
                },
                "examples": {
                  "SuccessfulOperation": {
                    "value": {
                      "result": true
                    }
                  },
                  "ReturnLastIdTrue": {
                    "value": {
                      "result": "1960561091"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/responses/UnableToCloseCase"
                    },
                    {
                      "$ref": "#/components/responses/MissingReasonAndReasonType"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  },
                  "UnableToCloseCase": {
                    "value": {
                      "code": 500,
                      "message": "Unable to change the status to Closed because the current status is Pending Close"
                    }
                  },
                  "MissingReasonType": {
                    "value": {
                      "code": 500,
                      "message": "Invalid Reason Type Passed [2].  A valid reason type string, or reason type code must be passed"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getAddressDetails": {
      "post": {
        "tags": [
          "getAddressDetails"
        ],
        "summary": "Get Address Detail",
        "description": "Gets address details from an address_id",
        "requestBody": {
          "description": "Address ID",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "address_id"
                ],
                "properties": {
                  "address_id": {
                    "type": "integer",
                    "example": 294381
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/Address"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/responses/UnauthorizedAddressAccess"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  },
                  "UnauthorizedAddressAccess": {
                    "value": {
                      "code": 500,
                      "message": "Address does not belong to you."
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getAllVendors": {
      "post": {
        "tags": [
          "getAllVendors"
        ],
        "summary": "Returns all vendors in RDN",
        "description": "Returns all vendors in RDN",
        "requestBody": {
          "description": "Empty Request Body",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfVendor"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getAllVendorsPaged": {
      "post": {
        "tags": [
          "getAllVendorsPaged"
        ],
        "summary": "Returns all vendors in RDN",
        "description": "Returns all vendors in RDN",
        "requestBody": {
          "description": "Empty Request Body",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfVendor"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getApprovedVendors": {
      "post": {
        "tags": [
          "getApprovedVendors"
        ],
        "summary": "Returns approved vendors for your lending institution",
        "description": "Returns approved vendors for your lending institution",
        "requestBody": {
          "description": "Empty Request Body",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfVendor"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getApprovedVendorsCoveringState": {
      "post": {
        "tags": [
          "getApprovedVendorsCoveringState"
        ],
        "summary": "Returns approved vendors covering a given state",
        "description": "Returns approved vendors covering a given state",
        "requestBody": {
          "description": "State abbreviation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApprovedVendorsCoveringState"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVendorData"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getApprovedVendorsCoveringZip": {
      "post": {
        "tags": [
          "getApprovedVendorsCoveringZip"
        ],
        "summary": "Returns approved vendors covering zip",
        "description": "Returns approved vendors covering zip",
        "requestBody": {
          "description": "Zip Code",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApprovedVendorsCoveringZip"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVendorData"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getApprovedVendorsCoveringZipExtended": {
      "post": {
        "tags": [
          "getApprovedVendorsCoveringZipExtended"
        ],
        "summary": "Returns approved vendors covering zip INCLUDING zip_code_of_used_branch",
        "description": "Returns approved vendors covering zip INCLUDING zip_code_of_used_branch",
        "requestBody": {
          "description": "Zip Code",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApprovedVendorsCoveringZipExtended"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVendorDataExtended"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getCaseComplaints": {
      "post": {
        "tags": [
          "getCaseComplaints"
        ],
        "summary": "Returns complaints on the case",
        "description": "Returns complaints on the case",
        "requestBody": {
          "description": "Case ID of a case",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfComplaint"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getCaseDocumentByIdData": {
      "post": {
        "tags": [
          "getCaseDocumentByIdData"
        ],
        "summary": "Return base64-encoded data representing a specific case document",
        "description": "Return base64-encoded data representing a specific case document",
        "requestBody": {
          "description": "Document ID from a case",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful getCaseDocumentByIdData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulOperationString"
                },
                "examples": {
                  "SuccessfulOperationString": {
                    "value": {
                      "result": "aGV5LCBqdXN0IHNvbWUgYmFzZTY0IGhlcmUuIG5pY2UgdG8gbWVldCB5b3UK"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getCaseDocumentData": {
      "post": {
        "tags": [
          "getCaseDocumentData"
        ],
        "summary": "Returns base64-encoded data for the documents of the case",
        "description": "Returns base64-encoded data for the documents of the case",
        "requestBody": {
          "description": "Case ID of a case",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringArray"
                },
                "examples": {
                  "SuccessfulOperation": {
                    "value": [
                      "documentText1",
                      "documentText2"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getCaseInvoiceByID": {
      "post": {
        "tags": [
          "getCaseInvoiceByID"
        ],
        "summary": "Pull an invoice's info by case_id and invoice_id",
        "description": "Pull an invoice's info by case_id and invoice_id",
        "requestBody": {
          "description": "Case ID",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseInvoiceByID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceInfo"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getCaseInvoiceData": {
      "post": {
        "tags": [
          "getCaseInvoiceData"
        ],
        "summary": "Returns invoice meta data for invoices on the given case",
        "description": "Returns invoice meta data for invoices on the given case",
        "requestBody": {
          "description": "Case ID to get its invoice info",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseItem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfInvoiceInfo"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getCaseInvoicesAsPdf": {
      "post": {
        "tags": [
          "getCaseInvoicesAsPdf"
        ],
        "summary": "Returns invoice PDFs for invoices on the given case",
        "description": "Returns invoice PDFs for invoices on the given case",
        "requestBody": {
          "description": "Case ID to get its invoice",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseItem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfInvoicePDF"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getCaseNumbersByAccountNumbers": {
      "post": {
        "tags": [
          "getCaseNumbersByAccountNumbers"
        ],
        "summary": "Returns the cases associated to the provided account numbers",
        "description": "Returns the cases associated to the provided account numbers",
        "requestBody": {
          "description": "Array of Account Numbers",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountNumbers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfAccountToCases"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/responses/MissingAccountNumber"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  },
                  "MissingAccountNumber": {
                    "value": {
                      "code": 500,
                      "message": "No account numbers found"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getCasePictureData": {
      "post": {
        "tags": [
          "getCasePictureData"
        ],
        "summary": "Returns base64-encoded picture information",
        "description": "Returns base64-encoded picture information",
        "requestBody": {
          "description": "Case ID of a case",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringArray"
                },
                "examples": {
                  "SuccessfulOperation": {
                    "value": [
                      "iVBORw0KGgoAAAANSUhEUgAAAUAAAACnCAYAAABgpoUkAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAhTSURBVHhe7dttkRxHGoVRURAGUzAHQRAGURADMzADIRACEzABMRCH8V6F724qN7u7xp5f/Z4TkTEzNfXVjvDjzKrxuxeAoQQQGEsAgbEEEBhLAIGxBBAYSwCBsQQQGEsAgbEEEBhLAIGxBBAYSwCBsQQQGEsAgbEEEBhLAIGxBBAYSwCBsQQQGEsAgbEEEBhLAIGxBBAYSwCBsQQQGEsAgbEEEBhLAIGxBBAYSwCBsQQQGEsAgbEEEBhLAIGxBBAYSwCBsQRwmO/fv798+/bt759gNgEc5I8//nj59ddfX/7888+/t8BsAjhAgvfhw4eXd+/e/Td+X79+/fEVJhPAJ5YZX8OX8fvvv//Y/vnzZwGE/xDAJ/Tly5efwpeRnyPh++233358D9MJ4JPIy41Pnz69vH///qfwZWRbXnxkn48fP/59BCCATyQzvz1+GZ3xJZDeAMP/COCTSeTW+P3yyy8/tud5oKUv/EwAn0ze8q4BXGd/wM+eKoC3loCn8SgIeV6Wv5k7HbuPPGNLeF5zzJXZWM/V53ZXn9+t18k9ZfaXfzbAz55uBnglgo1f9u2fhpxcCdoav/5pyb4M3UdjdC9KOV/3zzUi5832e/KMr8f1c3rxAWdPuQS+F8EELxHJ38LdC1Albqc3qxmNX//ebn3BkOucjuk1E6d7198/Q66TwD76+73cS4/JvrmnfFbg/z3tM8D97+AyOpNKEF7zNvTWjC6BSag609rt99Dr55h7M8/Yr5klc8J961rV8P7TzwqTjApgRmdRj2ZSq1szwL5ZzdeT/O50TGZzjwKYt7frcVmKx6MANpzdz/IXbnv6AO7xahiuLgv3peg6HgUwoduP6XXvhex0XEZmgLnevRldw5nAXwktTPb0AeyMqGNdGl6RGVSOO70MeRTA2AO8zuRuvdC49fzwUdQSxu4blr9w39MHMNFoFDq6BM64J4HqMaeZ4JUA7gHOyHlzvlvXb3T30Vnjrdlj77HLXstfuO/pAxj/dBncmVhmbYnceo6MKwE8hTPbEsFb1+9++3PA/l8dt8LW2Ob8lr/w2IgA9vuOq8vgLnsTktNM8koA12VpRwN8Clmvk9g1aOvI+RK40zUbzOyT+0oEgdtGBjAjoUkgbi1D13BltnaK0ZUAxv78sAHOsfszukQ5++R6p9ljYpxj9njns+T3fcZo+QuPjQngrWVwInTSEDUk+3I042oAe651JFinZWpj2UDvx/V+ev/V5Xqu1WAD940J4D6DW2dhJw1eZmEZ+/EZVwOY3+/HNnxrqPZZZ6O2j2joKmHM7xLODuC+MQFMENaINBanZXBnXo1k4nI6/moAY5+B5p5iDWCXvP1drnuKYK6X+8n+1d9FzrnGETgbE8C4tQzen6d1tpevmZXl62kW95oAdoa2jkQqEevxvW5npTnmtAzu/fb+e29rOIHHRgWwgenoDG9fTjaUCUtmYJltNTLryLarATzN5HLe9YVGr5vo9drr9o6+6GgAc3y2Z/+crwEF7hsVwNMyNtsSnC4nu0//5q7H/tsArs/3OtaZ3L7szu+yLfZwZ/QZYfbpi5N8323AY6MCGPtsqrOoddmZ7Q1QI/VvAxj7m+RGNtfIebKty9d1Gdtng+vIttxfj2s4+3mAx8YF8N5sap2ldWna2dRbBDDn28+R66znTthyP2vI8vN6TEZ/36j2Z8//4LpxAUzQ1pBkJDoJUY/pM7b1uLcI4GkJ3ud8/Tn3kfvJWHWZ29EZX+85++c+9uOA28YFMPalaGdNjUyilFg1TvEWATzN5HLthnF9uZF9V6fZY2LeJX1nrPkKXDMygLdi0u+7BF1j8hYBjN5XRwLW+8nX7rM7XT/3mK8Np+UvvM7IAJ6WwZ39JSL7M7h4qwBmVrmfp6NvpHPOk/0FTkdnfg0ocM3IAMa+DO7o87f9WdpbBfAU3464d77E+XRcwpn7zVfguqcNYOOQmdEpgKdlcF8sdBa4eqsAxmkm13u8t4xN5PbjMmKfsQKPPWUAE73GIXE6ReU0E+tzv1NM3jKAfXa3jiyNE917AVw/V8eVcAJnTxnARKmByKwpcUk8dvsyOCHrG+DdWwbwNJPrdfel926/58wmE3PP/+D1ni6AicG6xMwMKfFLqHbrMjhhidNyOU6ztmxLtF4bn1NMc93E79G5st9+bO6h9wJc91QBTFhOz9cSlsQhcVyty+CE5zST6rJ0Pd86Ep6c/9HMrbLf6TwZeROdmeDpXLmPvqk+jRzTzwBc8xQBTBzyL/8pDB2ZOSVk+8uNRiWzxD0g2XYvOh2JYMaj+GSf0/HraATXc+X7W2+t15FZbq6xf0bg7CmfAd5zb6Z2a/l7VQL6VvHJfZ6eWz7S/xgAjz1FAB/N/vaxBiLB6PbMvHb3lqynkRncvQielui3xnqu196HCMJj42aAACWAwFgCCIwlgMBYAgiMJYDAWAIIjCWAwFgCCIwlgMBYAgiMJYDAWAIIjCWAwFgCCIwlgMBYAgiMJYDAWAIIjCWAwFgCCIwlgMBYAgiMJYDAWAIIjCWAwFgCCIwlgMBYAgiMJYDAWAIIjCWAwFgCCIwlgMBYAgiMJYDAWAIIjCWAwFgCCIwlgMBYAgiMJYDAWAIIjCWAwFgCCIwlgMBYAgiMJYDAWAIIjCWAwFgCCIwlgMBYAgiMJYDAWAIIjCWAwFgCCIwlgMBYAgiMJYDAWAIIjCWAwFgCCIwlgMBYAgiMJYDAWAIIjCWAwFgCCIwlgMBYAgiMJYDAWAIIjCWAwFgCCIwlgMBYAgiMJYDAWAIIjCWAwFgCCIwlgMBYAgiMJYDAWAIIjCWAwFgCCIwlgMBYAggM9fLyF0gwSYld9xpqAAAAAElFTkSuQmCC"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getCasePhotoByIdData": {
      "post": {
        "tags": [
          "getCasePhotoByIdData"
        ],
        "summary": "Returns base64-encoded picture information for a single picture by ID",
        "description": "Returns base64-encoded picture information for a single picture by ID",
        "requestBody": {
          "description": "Photo id",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "photo_id": {
                    "type": "integer",
                    "example": 27868743
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulOperationString"
                },
                "examples": {
                  "SuccessfulOperation": {
                    "value": {
                      "result": 8675309147382
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  },
                  "InvalidUrl": {
                    "value": {
                      "code": 500,
                      "message": "Invalid url"
                    }
                  },
                  "NoUrlItem": {
                    "value": {
                      "code": 500,
                      "message": "No url items found"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getCasesByVin": {
      "post": {
        "tags": [
          "getCasesByVin"
        ],
        "summary": "Return a list of cases created for a VIN",
        "description": "Return a list of cases created for a VIN",
        "requestBody": {
          "description": "Vin Number",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "vin_number"
                ],
                "properties": {
                  "vin_number": {
                    "type": "string",
                    "example": "KMHGH4JH5FU092741"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfRdnCaseSimple"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getCasesStatus": {
      "post": {
        "tags": [
          "getCasesStatus"
        ],
        "summary": "Returns case status for a set of cases. Limit to 100 at a time",
        "description": "Returns case status for a set of cases. Limit to 100 at a time",
        "requestBody": {
          "description": "Array of Case IDs",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cases"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfRdnCaseSimple"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/responses/MissingCaseIds"
                    },
                    {
                      "$ref": "#/components/responses/CaseLimitError"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  },
                  "MissingCaseIds": {
                    "value": {
                      "code": 500,
                      "message": "No cases found in request"
                    }
                  },
                  "CaseLimitError": {
                    "value": {
                      "code": 500,
                      "message": "Please limit case requests to 100 cases at a time"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getCaseStatus": {
      "post": {
        "tags": [
          "getCaseStatus"
        ],
        "summary": "Returns the current case status as a string",
        "description": "Returns the current case status as a string",
        "requestBody": {
          "description": "Case ID of a case",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCaseStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "400 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/MissingCaseId"
                    }
                  ]
                },
                "examples": {
                  "MissingCaseId": {
                    "value": {
                      "code": 400,
                      "message": "Missing case id for RdnCaseInfo"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getCaseUpdates": {
      "post": {
        "tags": [
          "getCaseUpdates"
        ],
        "summary": "Returns a set of Update objects representing the visible updates on a case",
        "description": "Returns a set of Update objects representing the visible updates on a case",
        "requestBody": {
          "description": "Case ID to get its updates",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseItem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCaseUpdatesResponse"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getCollectors": {
      "post": {
        "tags": [
          "getCollectors"
        ],
        "summary": "Get list of collectors",
        "description": "Get list of collectors",
        "requestBody": {
          "description": "active/inactive collectors",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active_only": {
                    "type": "boolean",
                    "example": false,
                    "default": true
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfCollectorInfo"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getConditionReports": {
      "post": {
        "tags": [
          "getConditionReports"
        ],
        "summary": "Returns a case condition reports data",
        "description": "Returns a case condition reports data",
        "requestBody": {
          "description": "Case ID to get its condition reports",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseItem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetConditionReportsResponse"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  },
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 500,
                      "message": "This API key is not authorized to access this case"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getConditionReportsAsPdf": {
      "post": {
        "tags": [
          "getConditionReportsAsPdf"
        ],
        "summary": "Returns a case condition reports pdf",
        "description": "Returns a case condition reports pdf",
        "requestBody": {
          "description": "Case ID to get its condition reports",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseItem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetConditionReportsAsPdfResponse"
                }
              }
            }
          },
          "400": {
            "description": "400 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/MissingCaseId"
                    }
                  ]
                },
                "examples": {
                  "MissingCaseId": {
                    "value": {
                      "code": 400,
                      "message": "Missing case id for RdnCaseInfo"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  },
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 500,
                      "message": "This API key is not authorized to access this case"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getFeeRequests": {
      "post": {
        "tags": [
          "getFeeRequests"
        ],
        "summary": "Return a list of pending fee requests. If a case ID is passed, all fee requests for that case will be sent, otherwise a list of pending and need information fee requests for all of your cases are returned",
        "description": "Return a list of pending fee requests. If a case ID is passed, all fee requests for that case will be sent, otherwise a list of pending and need information fee requests for all of your cases are returned",
        "requestBody": {
          "description": "Case ID of a case",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CaseItem"
                  },
                  {
                    "type": "object"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfFeeRequests"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getFireHose": {
      "post": {
        "tags": [
          "getFireHose"
        ],
        "summary": "This function will allow you to subscribe to the change events present for RDN cases.",
        "description": "This function will allow you to subscribe to the change events present for RDN cases. It's your responsibility to store & send sensible last_event_ids. Contact support@recoverydatabase.net for help on event_types and general functioning of this API method. Returns 2,000,000 events back from the last_event_id. Should be returning event_persistent_data.old when event_type = 1104",
        "requestBody": {
          "description": "Firehose data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetFireHose"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Return FirehoseData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FirehoseData"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/responses/InvalidEventID"
                    },
                    {
                      "$ref": "#/components/responses/NotRecentEventID"
                    },
                    {
                      "$ref": "#/components/responses/UnableToDetermineMaxID"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  },
                  "InvalidEventID": {
                    "value": {
                      "code": 500,
                      "message": "Unable to determine the max_id for getRdnFirehose. "
                    }
                  },
                  "NotRecentEventID": {
                    "value": {
                      "code": 500,
                      "message": "Your event request ID exceeds the maximum number.  Please try a more recent event id. "
                    }
                  },
                  "UnableToDetermineMaxID": {
                    "value": {
                      "code": 500,
                      "message": "Are you really passing us a negative number?"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getLastEventId": {
      "post": {
        "tags": [
          "getLastEventId"
        ],
        "summary": "Returns the current last event id",
        "description": "Returns the current last event id",
        "requestBody": {
          "description": "Empty Request Body",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Operation: Returns the last event id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulOperationString"
                },
                "examples": {
                  "SuccessfulOperationString": {
                    "value": {
                      "result": 2149570627
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getInvoiceInfo": {
      "post": {
        "tags": [
          "getInvoiceInfo"
        ],
        "summary": "Returns meta-data around a given invoice",
        "description": "Returns meta-data around a given invoice",
        "requestBody": {
          "description": "Invoice ID of a case",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Invoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceInfo"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/responses/UnauthorizedInvoice"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  },
                  "UnauthorizedInvoice": {
                    "value": {
                      "code": 500,
                      "message": "This invoice does not belong to you 0,0"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getInvoiceAsPdf": {
      "post": {
        "tags": [
          "getInvoiceAsPdf"
        ],
        "summary": "Returns pdf-data around a given invoice",
        "description": "Returns pdf-data around a given invoice",
        "requestBody": {
          "description": "Invoice ID of a case",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "invoice": {
                    "type": "integer",
                    "example": 27868743
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInvoiceAsPdfResponse"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/responses/UnauthorizeInvoiceAccess"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  },
                  "UnauthorizeInvoiceAccess": {
                    "value": {
                      "code": 500,
                      "message": "This invoice does not belong to you 123,101336"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getInvoiceServices": {
      "post": {
        "tags": [
          "getInvoiceServices"
        ],
        "summary": "Returns base invoice services set up under your company profile",
        "description": "Returns base invoice services set up under your company profile",
        "requestBody": {
          "description": "Empty Request Body",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfInvoiceClientService"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/responses/UnauthorizedInvoice"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  },
                  "UnauthorizedInvoice": {
                    "value": {
                      "code": 500,
                      "message": "This invoice does not belong to you 0,0"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/approveInvoice": {
      "post": {
        "tags": [
          "approveInvoice"
        ],
        "summary": "Approves a given invoice",
        "description": "Approves a given invoice",
        "requestBody": {
          "description": "Invoice ID of a case",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceApprove"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulOperation"
                },
                "examples": {
                  "SuccessfulOperation": {
                    "value": {
                      "result": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/responses/UnauthorizeInvoiceAccess"
                    },
                    {
                      "$ref": "#/components/responses/InvoiceAlreadyApproved"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  },
                  "UnauthorizeInvoiceAccess": {
                    "value": {
                      "code": 500,
                      "message": "This invoice does not belong to you 123,101336"
                    }
                  },
                  "InvoiceAlreadyApproved": {
                    "value": {
                      "code": 500,
                      "message": "The requested invoice was already approved on 2023-02-08 16:19:22"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/approveVendor": {
      "post": {
        "tags": [
          "approveVendor"
        ],
        "summary": "Adds a vendor to your approved vendor list",
        "description": "Adds a vendor to your approved vendor list",
        "requestBody": {
          "description": "ID of a vendor",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VendorApprove"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulOperation"
                },
                "examples": {
                  "SuccessfulOperation": {
                    "value": {
                      "result": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/approveVendorStorage": {
      "post": {
        "tags": [
          "approveVendorStorage"
        ],
        "summary": "Approve Storage Locations for a direct vendor. Pass an array of storage location with a vendor udbsaid. Pass false to unapprove. Defaults to true",
        "description": "Approve Storage Locations for a direct vendor. Pass an array of storage location with a vendor udbsaid. Pass false to unapprove. Defaults to true",
        "requestBody": {
          "description": "ID of a vendor, storage location IDs, approval",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VendorStorageApprove"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulOperation"
                },
                "examples": {
                  "SuccessfulOperation": {
                    "value": {
                      "result": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/denyInvoice": {
      "post": {
        "tags": [
          "denyInvoice"
        ],
        "summary": "Denies a given invoice",
        "description": "Denies a given invoice",
        "requestBody": {
          "description": "Invoice ID of a case",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceDeny"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulOperation"
                },
                "examples": {
                  "SuccessfulOperation": {
                    "value": {
                      "result": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/responses/UnauthorizeInvoiceAccess"
                    },
                    {
                      "$ref": "#/components/responses/InvoiceAlreadyApproved"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  },
                  "UnauthorizeInvoiceAccess": {
                    "value": {
                      "code": 500,
                      "message": "This invoice does not belong to you 123,101336"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getRdnCaseInfo": {
      "post": {
        "tags": [
          "getRdnCaseInfo"
        ],
        "summary": "Get case Info",
        "description": "Returns Case meta data",
        "requestBody": {
          "description": "Case ID to get its info",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RdnCaseInfo"
                }
              }
            }
          },
          "400": {
            "description": "400 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/MissingCaseId"
                    }
                  ]
                },
                "examples": {
                  "MissingCaseId": {
                    "value": {
                      "code": 400,
                      "message": "Missing case id for RdnCaseInfo"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getRdnCasesInfo": {
      "post": {
        "tags": [
          "getRdnCasesInfo"
        ],
        "summary": "Returns case meta data for a set of cases. Limit to 100 at a time",
        "description": "Returns case meta data for a set of cases. Limit to 100 at a time",
        "requestBody": {
          "description": "Array of Case IDs",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cases"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfRdnCaseInfo"
                }
              }
            }
          },
          "400": {
            "description": "400 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/MissingCaseId"
                    }
                  ]
                },
                "examples": {
                  "MissingCaseId": {
                    "value": {
                      "code": 400,
                      "message": "Missing case id for RdnCaseInfo"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/responses/MissingCaseIds"
                    },
                    {
                      "$ref": "#/components/responses/CaseLimitError"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  },
                  "MissingCaseIds": {
                    "value": {
                      "code": 500,
                      "message": "No cases found in request"
                    }
                  },
                  "CaseLimitError": {
                    "value": {
                      "code": 500,
                      "message": "Please limit case requests to 100 cases at a time"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getRecentStoredCollateral": {
      "post": {
        "tags": [
          "getRecentStoredCollateral"
        ],
        "summary": "Get vehicles for Best Venue",
        "description": "Get vehicles for Best Venue",
        "requestBody": {
          "description": "start_date, vendors: whitelisted vendors (no restrictions, if empty), storage_locations: whitelisted storage locations (no restrictions, if empty)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecentStoredCollateral"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfStoredCollateral"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getRecentUpdatesForCase": {
      "post": {
        "tags": [
          "getRecentUpdatesForCase"
        ],
        "summary": "Returns an array of Update objects representing updates for a case in descending order from a given start date.",
        "description": "Returns an array of Update objects representing updates for a case in descending order from a given start date.",
        "requestBody": {
          "description": "case_id, start_date",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecentUpdatesForCase"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfUpdate"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/responses/MissingCaseId"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  },
                  "MissingCaseId": {
                    "value": {
                      "code": 500,
                      "message": "No case found in request"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getRepossessionDetails": {
      "post": {
        "tags": [
          "getRepossessionDetails"
        ],
        "summary": "Returns repossession details for a given case",
        "description": "Returns repossession details for a given case",
        "requestBody": {
          "description": "Case ID of a case",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseItem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRepoDetailsResponse"
                }
              }
            }
          },
          "400": {
            "description": "400 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/MissingCaseId"
                    }
                  ]
                },
                "examples": {
                  "MissingCaseId": {
                    "value": {
                      "code": 400,
                      "message": "Missing case id for RdnCaseInfo"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getRepossessionsSince": {
      "post": {
        "tags": [
          "getRepossessionsSince"
        ],
        "summary": "Returns an array of case IDs that have been repossessed since a certain date",
        "description": "Returns an array of case IDs that have been repossessed since a certain date",
        "requestBody": {
          "description": "start_date",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SinceDate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cases"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getUpdate": {
      "post": {
        "tags": [
          "getUpdate"
        ],
        "summary": "Returns a single update for a Lender by its ID",
        "description": "Returns a single update for a Lender by its ID",
        "requestBody": {
          "description": "Update ID of a case",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUpdateResponse"
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/responses/InvalidUpdateId"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  },
                  "InvalidUpdateId": {
                    "value": {
                      "code": 500,
                      "message": "The update id you provided could not be found"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getVendorInformation": {
      "post": {
        "tags": [
          "getVendorInformation"
        ],
        "summary": "Returns meta-data about a given vendor",
        "description": "Returns meta-data about a given vendor",
        "requestBody": {
          "description": "vendor_id",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VendorId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorData"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getVendorScoreCard": {
      "post": {
        "tags": [
          "getVendorScoreCard"
        ],
        "summary": "Returns the scorecard rating for a given vendor",
        "description": "Returns the scorecard rating for a given vendor",
        "requestBody": {
          "description": "vendor_id",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VendorId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScorecardScore"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getVendorStoragesForApproval": {
      "post": {
        "tags": [
          "getVendorStoragesForApproval"
        ],
        "summary": "Returns a list of storage locations for direct vendors. Pass udbsaid to get an array of StorageLocationInfo. Pass include_approved true to include already approved storages",
        "description": "Returns a list of storage locations for direct vendors. Pass udbsaid to get an array of StorageLocationInfo. Pass include_approved true to include already approved storages",
        "requestBody": {
          "description": "udbsaid, show_approved",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VendorStorages"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayOfStorageLocationInfo"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getVendorsCoverageAreas": {
      "post": {
        "tags": [
          "getVendorsCoverageAreas"
        ],
        "summary": "Returns covered zip codes for vendors",
        "description": "Returns covered zip codes for vendors",
        "requestBody": {
          "description": "vendors",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputStrings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorCoverageAreas"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/getVendorsRecoveryRates": {
      "post": {
        "tags": [
          "getVendorsRecoveryRates"
        ],
        "summary": "Returns recovery rates for vendors",
        "description": "Returns recovery rates for vendors",
        "requestBody": {
          "description": "vendors",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputStrings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVendorData"
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/holdCase": {
      "post": {
        "tags": [
          "holdCase"
        ],
        "summary": "Places a case in Pending Hold for the Vendor to accept",
        "description": "Places a case in Pending Hold status if its in Open, Need Info or New from Client status",
        "requestBody": {
          "description": "HoldCase object for which the case needs to be put on hold",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HoldCase"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Hold Case",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SuccessfulOperation"
                    },
                    {
                      "$ref": "#/components/responses/ReturnLastIdTrue"
                    }
                  ]
                },
                "examples": {
                  "SuccessfulOperation": {
                    "value": {
                      "result": true
                    }
                  },
                  "ReturnLastIdTrue": {
                    "value": {
                      "result": "1960561091"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/responses/UnableToChangeStatus"
                    },
                    {
                      "$ref": "#/components/responses/InvalidCollectorId"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  },
                  "UnableToChangeStatus": {
                    "value": {
                      "code": 500,
                      "message": "Unable to change the status to On Hold because the current status is Pending On Hold"
                    }
                  },
                  "InvalidCollectorId": {
                    "value": {
                      "code": 500,
                      "message": "Invalid collector_id"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/removeInvoiceApproval": {
      "post": {
        "tags": [
          "removeInvoiceApproval"
        ],
        "summary": "Removes the approval of a given invoice",
        "description": "Removes the approval of a given invoice",
        "requestBody": {
          "description": "Invoice to remove approval from",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Invoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Case Reopen",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulOperation"
                },
                "examples": {
                  "SuccessfulOperation": {
                    "value": {
                      "result": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/reopenCase": {
      "post": {
        "tags": [
          "reopenCase"
        ],
        "summary": "Places a case in New From Client for the Vendor to re-accept",
        "description": "Places a case in New From Client if the case is in Hold or Pending On Hold status",
        "requestBody": {
          "description": "Case ID that needs to be reopened",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Case Reopen",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulOperation"
                },
                "examples": {
                  "SuccessfulOperation": {
                    "value": {
                      "result": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/responses/UnableToReopenCase"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  },
                  "UnableToReopenCase": {
                    "value": {
                      "code": 500,
                      "message": "Unable to re-open this case"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/unapproveVendor": {
      "post": {
        "tags": [
          "unapproveVendor"
        ],
        "summary": "Removes a vendor from your approved vendor list",
        "description": "Removes a vendor from your approved vendor list",
        "requestBody": {
          "description": "vendor_id",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "vendor_id"
                ],
                "properties": {
                  "vendor_id": {
                    "type": "string",
                    "example": 2070817008
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Vendor Approval Removal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulOperation"
                },
                "examples": {
                  "SuccessfulOperation": {
                    "value": {
                      "result": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/updateCaseAdditionalInfo": {
      "post": {
        "tags": [
          "updateCaseAdditionalInfo"
        ],
        "summary": "Updates the additional info on the case",
        "description": "Updates the additional info on the case",
        "requestBody": {
          "description": "Case ID and Additional Info",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "case_id",
                  "info"
                ],
                "properties": {
                  "case_id": {
                    "maxLength": 11,
                    "type": "integer",
                    "example": 2070817008
                  },
                  "info": {
                    "type": "string",
                    "example": "Additional Info"
                  },
                  "switch": {
                    "type": "string",
                    "example": "prepend",
                    "description": "Optional switch to append or prepend to existing case additional info. Allowed values are \"prepend\" to prepend, \"append\" for append, or empty to replace"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Case Additional Info Update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulOperation"
                },
                "examples": {
                  "SuccessfulOperation": {
                    "value": {
                      "result": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/updateCaseAddress": {
      "post": {
        "tags": [
          "updateCaseAddress"
        ],
        "summary": "Update address information on a case.",
        "description": "Update address information on a case.",
        "requestBody": {
          "description": "Case ID and address object to update address to the case",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "case_id",
                  "address"
                ],
                "properties": {
                  "case_id": {
                    "maxLength": 11,
                    "type": "integer",
                    "example": 2070817008
                  },
                  "address": {
                    "type": "object",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Address"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation: Update Case Address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulOperationString"
                },
                "examples": {
                  "SuccessfulOperationString": {
                    "value": {
                      "result": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/updateCaseCollateral": {
      "post": {
        "tags": [
          "updateCaseCollateral"
        ],
        "summary": "Update the collateral on the case",
        "description": "Update the collateral on the case",
        "requestBody": {
          "description": "Case id and collateral object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseCollateral"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Case Collateral Update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulOperation"
                },
                "examples": {
                  "SuccessfulOperation": {
                    "value": {
                      "result": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/UnauthorizeCaseAccess"
                    }
                  ]
                },
                "examples": {
                  "UnauthorizeCaseAccess": {
                    "value": {
                      "code": 403,
                      "message": "This API key is not authorized to access this case [0]"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/responses/YearMakeModelVinError"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  },
                  "YearMakeModelVinRequired": {
                    "value": {
                      "code": 500,
                      "message": "Collateral year, make and model or vin is required"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/updateCaseCustomField": {
      "post": {
        "tags": [
          "updateCaseCustomField"
        ],
        "summary": "Get a custom field by id",
        "description": "Get a custom field by id",
        "requestBody": {
          "description": "vendor_id",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "custom_field",
                  "case"
                ],
                "properties": {
                  "custom_field": {
                    "$ref": "#/components/schemas/CustomField"
                  },
                  "case": {
                    "type": "integer",
                    "example": 2149964689
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Case Custom Field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulOperation"
                },
                "examples": {
                  "SuccessfulOperation": {
                    "value": {
                      "result": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/InvalidOrMissingKey"
                    }
                  ]
                },
                "examples": {
                  "InvalidOrMissingKey": {
                    "value": {
                      "code": 401,
                      "message": "invalid or missing api key"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "500 errors",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "code": 500,
                      "message": "Internal Error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/responses/Unavailable"
                },
                "examples": {
                  "Unavailable": {
                    "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
                  }
                }
              }
            }
          },
          "default": {
            "description": "All other unexpected errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyHeader": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    }
  },
  "components": {
    "responses": {
      "DuplicateCase": {
        "description": "Case with same account number already exists with the agent",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "AddressRequired": {
        "description": "addresses is required parameter",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "TierConfigRequired": {
        "description": "tier_configuration_id must be provided when repo_vendor is provided",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "AutoAllocateDisabled": {
        "description": "Method addCaseAutoAllocate is not enabled for this client",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UnableToAssignVendor": {
        "description": "Unable to assign repo vendor to the case",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InvalidOrMissingKey": {
        "description": "invalid or missing api key",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unavailable": {
        "description": "Service Temporarily Unavailable",
        "content": {
          "text/html": {
            "schema": {
              "type": "string"
            },
            "examples": {
              "html": {
                "summary": "service unavailable",
                "value": "<html><head><title>503 Service Temporarily Unavailable</title></head><body><center><h1>503 Service Temporarily Unavailable</h1></center></body></html>"
              }
            }
          }
        }
      },
      "InvalidCompanyCode": {
        "description": "Invalid Company Code",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InvalidLenderVendorId": {
        "description": "Invalid lender_vendor_id",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "MissingLenderVendorRepoVendor": {
        "description": "Either $lender_vendor_id or $repo_vendor is required",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InvalidUpdateId": {
        "description": "The update id you provided could not be found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "MissingCaseId": {
        "description": "Case id must be entered",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UnauthorizeCaseAccess": {
        "description": "API is not authorized to access given case id",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UnauthorizeInvoiceAccess": {
        "description": "API is not authorized to access given invoice id",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InvoiceAlreadyApproved": {
        "description": "Invoice was already approved",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "BadCustomField": {
        "description": "Bad Custom Field",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "VendorOutOfService": {
        "description": "Case can't be created - the vendor is out of service",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UnapprovedInactiveVendor": {
        "description": "Can only add a case if assigned to an Approved and Active vendor.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ExistingCase": {
        "description": "Unable to create case - there is an existing active case with the passed account number with the agent.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InactiveLienholder": {
        "description": "The passed lien holder is inactive",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InvalidLienholderId": {
        "description": "Invalid lien_holder_id",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InvalidPhoneType": {
        "description": "Invalid phone type",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UnableToChangeStatus": {
        "description": "Current status of case should be Open, Need Info or New From client to be changed to Pending On Hold",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UnableToReopenCase": {
        "description": "Current status of case should be On Hold or Pending On Hold to be changed to Open",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "MissingReasonAndReasonType": {
        "description": "Must provide any one reason or reason_type",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InvalidEventID": {
        "description": "Event ID cannot be negative",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotRecentEventID": {
        "description": "Provide a more recent event id, ID exceeds the maximum number",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UnableToDetermineMaxID": {
        "description": "Unable to determine the max_id for getRdnFirehose.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NoPermissionToAddUpdates": {
        "description": "Assignee should have the permission to add updates",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InvalidCollectorId": {
        "description": "Invalid Collector Id",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UnableToCloseCase": {
        "description": "Current status of case should be Open, Need Info, Pending On Hold, On Hold or New From client to be changed to Closed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ReturnLastIdTrue": {
        "description": "Returns the last event ID when return_last_id is set true",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SuccessfulOperationString"
            }
          }
        }
      },
      "MissingCaseIds": {
        "description": "Case id must be entered",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "CaseLimitError": {
        "description": "Enter 100 case at a time",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "YearMakeModelVinError": {
        "description": "Either Year, Make, Model are required or VIN",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UnauthorizedInvoice": {
        "description": "API is not authorized to access given invoice id",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "MissingAccountNumber": {
        "description": "Account Number must be entered",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UnauthorizedAddressAccess": {
        "description": "API is not authorized to access given address id",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "Case": {
        "required": [
          "account_number",
          "collateral",
          "order_type"
        ],
        "type": "object",
        "properties": {
          "account_number": {
            "maxLength": 255,
            "type": "string",
            "description": "Client's account number to be added to the case",
            "example": "1122121212ABC"
          },
          "order_type": {
            "$ref": "#/components/schemas/OrderType"
          },
          "collateral": {
            "$ref": "#/components/schemas/Collateral"
          },
          "collector_id": {
            "maxLength": 255,
            "type": "string",
            "description": "Client's collector id to be attached to the case",
            "default": null
          },
          "lender_vendor_id": {
            "maxLength": 255,
            "type": "string",
            "description": "pass the client's id for the vendor",
            "default": null
          },
          "repo_vendor": {
            "maxLength": 255,
            "type": "string",
            "description": "pass the vendor's RDN udbsaid",
            "default": null
          },
          "account_info": {
            "$ref": "#/components/schemas/AccountInfo"
          },
          "debtor": {
            "$ref": "#/components/schemas/Person"
          },
          "cosigner": {
            "$ref": "#/components/schemas/Person"
          },
          "addresses": {
            "$ref": "#/components/schemas/Addresses"
          },
          "additional_info": {
            "type": "string",
            "description": "additional information on the case",
            "example": "This is additional information for the case added by the client",
            "maxLength": 65535,
            "default": null
          },
          "sub_status": {
            "type": "string",
            "description": "client sub status on the case",
            "default": null
          },
          "is_lpr_20": {
            "type": "boolean",
            "example": false,
            "default": false
          },
          "lien_holder_id": {
            "type": "integer",
            "format": "int32",
            "default": null
          },
          "custom_fields": {
            "$ref": "#/components/schemas/CustomFields"
          },
          "is_vla": {
            "type": "boolean",
            "example": false,
            "default": false
          },
          "validate_vendor_status": {
            "type": "boolean",
            "example": false,
            "default": false
          },
          "tier_configuration_id": {
            "maxLength": 36,
            "type": "string",
            "description": "tier configuration id",
            "example": null,
            "default": null
          },
          "tier_ordinal": {
            "type": "integer",
            "description": "tier ordinal",
            "format": "int32",
            "default": null
          },
          "post_charge_off": {
            "type": "integer",
            "description": "post charge off",
            "format": "tinyint",
            "example": 0,
            "default": 0
          },
          "ignore_tiering": {
            "type": "boolean",
            "example": false,
            "default": false
          },
          "tiered_case_id": {
            "maxLength": 36,
            "type": "string",
            "description": "tier case id generated by rdn - internal use",
            "default": null
          },
          "follow_order_type": {
            "type": "integer",
            "description": "follow order type during tier transition",
            "format": "tinyint",
            "example": 0
          },
          "tier_manually_assigned": {
            "type": "integer",
            "description": "manually assign tier ordinal",
            "format": "tinyint",
            "example": 0
          }
        }
      },
      "CaseAutoAllocate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Case"
          },
          {
            "required": [
              "addresses"
            ]
          },
          {
            "type": "object",
            "properties": {
              "tier_configuration_id": {
                "maxLength": 36,
                "type": "string",
                "description": "tier configuration id",
                "example": null,
                "default": null
              },
              "tier_ordinal": {
                "type": "integer",
                "description": "tier ordinal",
                "format": "int32",
                "default": null
              },
              "post_charge_off": {
                "type": "integer",
                "description": "post charge off",
                "format": "tinyint",
                "example": 0,
                "default": 0
              },
              "ignore_tiering": {
                "type": "boolean",
                "example": false,
                "default": false
              },
              "tiered_case_id": {
                "maxLength": 36,
                "type": "string",
                "description": "tier case id generated by rdn - internal use",
                "default": null
              },
              "follow_order_type": {
                "type": "integer",
                "description": "follow order type during tier transition",
                "format": "tinyint",
                "example": 0
              },
              "tier_manually_assigned": {
                "type": "integer",
                "description": "manually assign tier ordinal",
                "format": "tinyint",
                "example": 0
              }
            }
          }
        ]
      },
      "OrderType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Order Type",
            "example": "Repossess",
            "enum": [
              "Auction",
              "Cond. Report",
              "Consign",
              "Conv to Repo",
              "Field Visit",
              "Impound Repo",
              "Impound Voluntary",
              "Investigate",
              "Pictures",
              "Repossess",
              "Store",
              "Tow",
              "Transport",
              "Vol. Repo",
              "Investigate/Repo",
              "LPR Staging"
            ]
          }
        }
      },
      "Collateral": {
        "required": [
          "vin"
        ],
        "type": "object",
        "properties": {
          "vin": {
            "maxLength": 35,
            "type": "string",
            "description": "VIN number",
            "example": "KMHGH4JH5FU092741"
          },
          "year": {
            "type": "integer",
            "description": "Vehicle Year",
            "format": "int32",
            "example": 2021,
            "default": 0
          },
          "make": {
            "maxLength": 255,
            "type": "string",
            "description": "Vehicle make",
            "example": "Honda",
            "default": ""
          },
          "model": {
            "maxLength": 255,
            "type": "string",
            "description": "Vehicle model",
            "example": "Pilot"
          },
          "vehicle_color": {
            "maxLength": 255,
            "type": "string",
            "description": "Vehicle color",
            "example": "Red"
          },
          "vehicle_license_number": {
            "maxLength": 35,
            "type": "string",
            "description": "Vehicle license number",
            "example": "CAR1234"
          },
          "vehicle_license_state": {
            "maxLength": 35,
            "type": "string",
            "description": "Vehicle license state",
            "example": "AZ"
          },
          "vehicle_license_exp": {
            "maxLength": 15,
            "type": "string",
            "description": "Vehicle license tag expiry",
            "example": "10/22"
          },
          "key_code_1": {
            "maxLength": 10,
            "type": "string",
            "description": "Vehicle key code",
            "example": "1329X"
          },
          "key_code_2": {
            "maxLength": 10,
            "type": "string",
            "description": "Vehicle key code 2",
            "example": "1329Y"
          },
          "dealer_name": {
            "maxLength": 255,
            "type": "string",
            "description": "Vehicle key code 2",
            "example": "ABC CHEVROLET CADILLA"
          },
          "milage": {
            "maxLength": 10,
            "type": "string",
            "description": "Vehicle milage",
            "example": "121121"
          }
        }
      },
      "SinceDate": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date",
            "example": "2020-06-01"
          }
        }
      },
      "AccountInfo": {
        "type": "object",
        "default": null,
        "properties": {
          "amount_past_due": {
            "type": "number",
            "description": "Amount due",
            "example": 1200.02
          },
          "balance_on_account": {
            "type": "number",
            "description": "Balance account",
            "example": 22500.68
          },
          "monthly_payments": {
            "type": "number",
            "description": "Monthly payment on account",
            "example": 225
          },
          "delinquent_since": {
            "type": "string",
            "description": "Deliquent since",
            "format": "date-time",
            "example": "2020-06-01T00:00:00.000Z"
          },
          "charge_off_date": {
            "type": "string",
            "description": "Charge off date",
            "format": "date-time",
            "example": "2020-06-01T00:00:00.000Z"
          },
          "bankruptcy_type": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "Bankruptcy Type",
                "example": "1",
                "default": "",
                "enum": [
                  "",
                  "1",
                  "2",
                  "3",
                  "4",
                  "5",
                  "6",
                  "7",
                  "8",
                  "9",
                  "10",
                  "11",
                  "12",
                  "13",
                  "14",
                  "15",
                  "16",
                  "17",
                  "18",
                  "19",
                  "20",
                  "21",
                  "22"
                ]
              }
            },
            "description": "empty=>None,1=>Chapter 7 - Discharged,2=>Chapter 11 - Discharged,3=>Chapter 13 - Discharged,4=>Chapter 7 - Reaffirmed,5=>Chapter 13 - Reaffirmed,6=>Chapter 11 - Reaffirmed,7=>Chapter 7 - Dismissed,8=>Chapter 7 - Filed,9=>Chapter 7 - Confirmed,10=>Chapter 7 - Lift of Stay,11=>Chapter 7,12=>Chapter 13,13=>Chapter 11 - Dismissed,14=>Chapter 11 - Filed,15=>Chapter 11 - Confirmed,16=>Chapter 11 - Lift of Stay,17=>Chapter 11,18=>Chapter 13 - Dismissed,19=>Chapter 13 - Filed,20=>Chapter 13 - Confirmed,21=>Chapter 13 - Lift of Stay,22=>Other"
          }
        }
      },
      "Person": {
        "type": "object",
        "default": null,
        "properties": {
          "first_name": {
            "maxLength": 255,
            "type": "string",
            "description": "First Name",
            "example": "TEST",
            "default": null
          },
          "middle_initial": {
            "maxLength": 8,
            "type": "string",
            "description": "Middle Name Initital",
            "example": "LA",
            "default": null
          },
          "last_name": {
            "maxLength": 255,
            "type": "string",
            "description": "Last Name",
            "example": "TESTLAST",
            "default": null
          },
          "ssn": {
            "maxLength": 255,
            "type": "string",
            "description": "SSN",
            "example": "1112225252",
            "default": null
          },
          "date_of_birth": {
            "type": "string",
            "description": "Date of Birth",
            "format": "date",
            "example": "1990-06-01",
            "default": null
          },
          "driver_license": {
            "$ref": "#/components/schemas/DriverLicenses"
          }
        }
      },
      "DriverLicenses": {
        "type": "object",
        "default": null,
        "properties": {
          "item": {
            "$ref": "#/components/schemas/DriverLicenseItem"
          }
        }
      },
      "DriverLicenseItem": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DriverLicense"
        }
      },
      "DriverLicense": {
        "type": "object",
        "properties": {
          "number": {
            "maxLength": 255,
            "type": "string",
            "example": "A1141152879657"
          },
          "state": {
            "maxLength": 50,
            "type": "string",
            "example": "AZ"
          }
        }
      },
      "Addresses": {
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/AddressItem"
          }
        }
      },
      "AddressItem": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Address"
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "address_id": {
            "type": "integer",
            "format": "int32",
            "example": 294381
          },
          "buisness_name": {
            "maxLength": 255,
            "type": "string",
            "example": "ABC Company LLC"
          },
          "unit": {
            "maxLength": 255,
            "type": "string",
            "example": "1122"
          },
          "phones": {
            "$ref": "#/components/schemas/Phones"
          },
          "county": {
            "maxLength": 255,
            "type": "string",
            "example": "Maricopa"
          },
          "address_type": {
            "type": "integer",
            "example": 1,
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              14,
              15,
              16,
              17
            ],
            "description": "Address Type (0=>Unknown,1=>Borrower - Home,2=>Borrower - Work,3=>Co Signer - Home,4=>Co Signer - Work,5=>Additional Address,6=>DMV Address,7=>Landlord Address,8=>Co Signer - Previous,9=>Borrower - Previous,10=>References,11=>3rd Party Address,12=>Pickup Address,14=>Phone Number,15=>LPR Location,16=>DRN Location,17=>On Hook)"
          },
          "custom_address_id": {
            "maxLength": 255,
            "type": "string",
            "example": "22332222"
          },
          "is_verified": {
            "type": "boolean",
            "example": false,
            "default": false
          },
          "priority": {
            "type": "integer"
          },
          "is_valid": {
            "type": "boolean",
            "example": false,
            "default": false
          },
          "cease_and_desist": {
            "type": "boolean",
            "example": false,
            "default": false
          },
          "lat": {
            "type": "number",
            "format": "float",
            "example": "30.1580494"
          },
          "long": {
            "type": "number",
            "format": "float",
            "example": "-90.98791120000001"
          },
          "address": {
            "maxLength": 255,
            "type": "string",
            "example": "123 East Main St."
          },
          "city": {
            "maxLength": 255,
            "type": "string",
            "example": "Milton"
          },
          "state": {
            "maxLength": 255,
            "type": "string",
            "example": "AZ"
          },
          "zip": {
            "maxLength": 5,
            "type": "string",
            "example": "85857"
          }
        }
      },
      "Phones": {
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/PhoneItem"
          }
        }
      },
      "PhoneItem": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Phone"
        }
      },
      "Phone": {
        "type": "object",
        "properties": {
          "phone_number": {
            "maxLength": 22,
            "type": "string",
            "example": "444-444-4444"
          },
          "phone_type": {
            "type": "integer",
            "description": "This is an enumerated type. One of the values below must be used. 1=>Phone,2=>Cell",
            "example": 1,
            "default": 1,
            "enum": [
              1,
              2
            ]
          }
        }
      },
      "CustomFields": {
        "type": "object",
        "default": null,
        "properties": {
          "item": {
            "$ref": "#/components/schemas/CustomFieldsItem"
          }
        }
      },
      "CustomFieldsItem": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CustomField"
        }
      },
      "CustomField": {
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "type": "string",
            "example": "8d5e957f297893487bd98fa830fa6413"
          },
          "value": {
            "maxLength": 65535,
            "type": "string",
            "description": "custom field value",
            "example": "Test value"
          },
          "label": {
            "type": "string",
            "description": "custom field label",
            "example": "Label"
          }
        }
      },
      "CaseResponseTiered": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/CaseItemTiered"
          }
        }
      },
      "CaseItemTiered": {
        "type": "object",
        "properties": {
          "vendor_id": {
            "maxLength": 255,
            "default": null,
            "type": "string",
            "example": "90DEMO"
          },
          "lender_vendor_id": {
            "maxLength": 255,
            "default": null,
            "type": "string",
            "example": "AZ12345"
          },
          "case_id": {
            "maxLength": 11,
            "type": "integer",
            "example": 2091258899
          },
          "tier_ordinal": {
            "maxLength": 11,
            "type": "integer",
            "example": 1
          }
        }
      },
      "CaseResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/CaseItem"
          }
        }
      },
      "CaseInvoiceByID": {
        "type": "object",
        "properties": {
          "case_id": {
            "type": "integer",
            "example": 2091258899
          },
          "invoice_id": {
            "type": "integer",
            "example": 43876207
          }
        }
      },
      "CaseItem": {
        "type": "object",
        "properties": {
          "vendor_id": {
            "maxLength": 255,
            "default": null,
            "type": "string",
            "example": "90DEMO"
          },
          "lender_vendor_id": {
            "maxLength": 255,
            "default": null,
            "type": "string",
            "example": "AZ12345"
          },
          "case_id": {
            "maxLength": 11,
            "type": "integer",
            "example": 2091258899
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "HoldCase": {
        "required": [
          "case"
        ],
        "type": "object",
        "properties": {
          "case": {
            "type": "integer",
            "format": "int32",
            "example": 2071840027
          },
          "reason": {
            "default": null,
            "type": "string",
            "description": "HoldReason. Must be type of HoldReason."
          },
          "other_reason": {
            "type": "string",
            "default": null,
            "description": "Overwrites reason if other_reason is provided or if reason is set as 100",
            "example": "other hold reason"
          },
          "collector_id": {
            "default": null,
            "type": "string",
            "example": 545185,
            "description": "Collector ID"
          },
          "reason_type": {
            "default": null,
            "description": "Hold reason ID, overrides reason if valid. Must be one of the following reason type ids: [1 =>'Customer Promised to Pay Current', 2 =>'Vehicle Could Not Be Located and Account is on Hold Pending Further Investigation', 3 =>'Vehicle Located But Cannot Be Recovered', 4 =>'Customer Filed Bankruptcy', 5 =>'Hold for Further Investigation', 6 =>'Hold Due to Vehicle Being Charged Off and Further Investigation is Required', 7 =>'Customer Claims Vehicle Was Stolen and Account is on Hold Pending Police Report Confirmation', 8 =>'Identity Theft Alleged By Customer and Account is on Hold Pending Verification', 9 =>'Customer Claims Vehicle Was Impounded and Account is on Hold Pending Verification', 10 => 'Military', 11 => 'Send New Cure Letter', 12 => 'No RPC/dropped in payment', 13 => 'Lien Holder is Seeking Judicial Recovery Through Litigation', 100 =>'Other']",
            "type": "string",
            "example": 1
          },
          "return_last_id": {
            "default": false,
            "type": "boolean",
            "description": "Returns the last event ID if passed true"
          }
        }
      },
      "ArrayOfUpdate": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Update"
        }
      },
      "Update": {
        "type": "object",
        "properties": {
          "update": {
            "$ref": "#/components/schemas/UpdateItem"
          }
        }
      },
      "UpdateItem": {
        "type": "object",
        "properties": {
          "collector_id": {
            "type": "string",
            "description": "Client's collector id",
            "example": 545185
          },
          "update_id": {
            "type": "integer",
            "description": "Case update id",
            "example": 1188721405
          },
          "update_type": {
            "$ref": "#/components/schemas/UpdateType"
          },
          "update_text": {
            "description": "Update Text",
            "type": "string",
            "example": "Your client has requested that this account be closed for the following reason: \\nPlease Close",
            "default": ""
          },
          "is_hidden": {
            "type": "boolean",
            "example": false,
            "default": false
          },
          "posted_by": {
            "description": "posted by id",
            "type": "integer",
            "example": 1091693
          },
          "posted_by_name": {
            "description": "posted by name",
            "type": "string",
            "example": "test name"
          },
          "posted_by_company": {
            "description": "Company Name",
            "type": "string",
            "example": "test company"
          },
          "update_date": {
            "description": "Update date",
            "type": "string",
            "format": "date-time",
            "default": "",
            "example": "2020-06-01T00:00:00.000Z"
          },
          "address_id": {
            "description": "Address ID",
            "type": "integer",
            "example": ""
          },
          "case_id": {
            "description": "Case ID",
            "type": "integer",
            "example": 2029243672,
            "default": 0
          },
          "priority": {
            "$ref": "#/components/schemas/UpdatePriority"
          }
        }
      },
      "UpdateType": {
        "type": "integer",
        "description": "1=>Client-Requesting Update,2=>Client-New Info,3=>Client-Account On HOLD,4=>Client-Account CLOSE,5=>Client-Other,6=>Agent-Update,7=>Other,8=>Unknown,9=>Client Update,10=>Agent-Request Client Update,11=>Agent-Other,12=>Agent-Requesting Update,13=>Address update,14=>User Update,15=>Status Change,16=>Transfer from Adjuster,17=>Transfer from RDN Company,18=>Transfer from Client,19=>Invoice Approval,20=>Client-Account Re-Opened,21=>Client Denied Invoice,22=>New DRN Location Available,23=>Agent Acknowledge,24=>Rejected Update,25=>Client-Case Edit,26=>Agent Decline,27=>CAC_Update,28=>THFT Status,29=>Client-Additional Fees,30=>Agent Runsheet Update,31=>DRN Location Purchased,32=>DRN Location Viewable,33=>Chase Doorknock,34=>User First Hit Update,35=>Agent First Hit Update,36=>(O)Agent-Update,37=>(O)Client-New Info,38=>(O)Client-Requesting Update,44=>Client-Account Closed,45=>(O)Agent-Requesting Info,46=>CAC Update,87=>(O) Other,99=>(O) Client-Account On Hold,100=>(O) Client-Account Closed,101=>(O) Address Update,102=>Agent GPS Update,103=>License Plate Updated,104=>Client-Permanent Banner,105=>Client Removed Invoice Approval,107=>Skip Update,108=>Client Removed Invoice Denial,109=>Agent-Recovery,110=>Agent-C/R,111=>Call Log,112=>First Update,113=>Agent-Completed,114=>Order Type Change,115=>ClearPlan Note,116=>Fee Request,117=>Cease and desist for address,118=>Recovery Date Updated,119=>Repossession process initiated,120=>Fee Approval,121=>MQ Update,122=>GPS Update,124=>On Hook,125=>Address not valid for debtor, contact established,126=>Address is Vacant,127=>Address Does not Exist,128=>Address Inaccessible (Guard/Gated),129=>Multiple attempts, unable to contact,130=>Address is Valid for Debtor - Unit Unrecoverable,131=>Address Valid - Unit Located at Alternate Address,132=>Address is Valid - Debtor Violent,133=>Other - Address Update,134=>Address occupied, will continue recovery efforts,135=>Address Confirmed Valid - Collateral Not Present,136=>Address Confirmed - Collateral Inaccessible,137=>Address Confirmed - Debtor Unwilling to Surrender,138=>Information Needed (Unit Number, Job Title Department, etc.),139=>(O) Address not valid for debtor, contact established,140=>(O) Address is Vacant,141=>(O) Address Does not Exist,142=>(O) Address Inaccessible (Guard/Gated),143=>(O) Multiple attempts, unable to contact,144=>(O) Address is Valid for Debtor - Unit Unrecoverable,145=>(O) Address Valid - Unit Located at Alternate Address,146=>(O) Address is Valid - Debtor Violent,147=>(O) Other - Address Update,148=>(O) Address occupied, will continue recovery efforts,149=>(O) Address Confirmed Valid - Collateral Not Present,150=>(O) Address Confirmed - Collateral Inaccessible,151=>(O) Address Confirmed - Debtor Unwilling to Surrender,152=>(O) Information Needed (Unit Number, Job Title Department, etc.,153=>Ran POE - No Unit Spotted,154=>(O) Ran POE - No Unit Spotted,155=>No Longer Employed,156=>(O) No Longer Employed,157=>Ran LPR Hit - No Unit Spotted,158=>(O) Ran LPR Hit - No Unit Spotted,159=>Ran LPR Hit - Collateral Inaccessible,160=>(O) Ran LPR Hit - Collateral Inaccessible,161=>Ran LPR Hit - Bad Scan,162=>(O) Ran LPR Hit - Bad Scan,163=>Ran LPR Hit - Right Tag/Wrong Unit,164=>(O) Ran LPR Hit - Right Tag/Wrong Unit,165=>Ran LPR Hit - Unit Confirmed at Another Location,166=>(O) Ran LPR Hit - Unit Confirmed at Another Location,167=>Ran LPR Hit - Exhausted Efforts, Unit Not Spotted,168=>(O) Ran LPR Hit - Exhausted Efforts, Unit Not Spotted,169=>Duplicate Address,170=>(O) Duplicate Address,171=>Address Out of Coverage,172=>(O) Address Out of Coverage)",
        "example": 3,
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          44,
          45,
          46,
          87,
          99,
          100,
          101,
          102,
          103,
          104,
          105,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          118,
          119,
          120,
          121,
          122,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          133,
          134,
          135,
          136,
          137,
          138,
          139,
          140,
          141,
          142,
          143,
          144,
          145,
          146,
          147,
          148,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          157,
          158,
          159,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172
        ]
      },
      "UpdatePriority": {
        "type": "string",
        "description": "empty=>Empty,empty=>Default,1=>Low,2=>Medium,3=>High",
        "example": "1",
        "enum": [
          "",
          "1",
          "2",
          "3"
        ]
      },
      "RecentStoredCollateral": {
        "type": "object",
        "properties": {
          "start_date": {
            "type": "string",
            "format": "date-time",
            "example": "2020-06-01T00:00:00.000Z"
          },
          "vendors": {
            "$ref": "#/components/schemas/ArrayOfString"
          },
          "storage_locations": {
            "$ref": "#/components/schemas/ArrayOfInt"
          }
        }
      },
      "ArrayOfStoredCollateral": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/StoredCollateral"
        }
      },
      "StoredCollateral": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "vin": {
            "type": "string"
          },
          "mileage": {
            "type": "string"
          },
          "storage_address": {
            "type": "string"
          },
          "odometer_type": {
            "$ref": "#/components/schemas/OdometerType"
          }
        }
      },
      "RdnCaseInfo": {
        "type": "object",
        "properties": {
          "collateral": {
            "$ref": "#/components/schemas/Collateral"
          },
          "debtor": {
            "$ref": "#/components/schemas/Person"
          },
          "co_signer": {
            "$ref": "#/components/schemas/Person"
          },
          "addresses": {
            "$ref": "#/components/schemas/Addresses"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "substatus": {
            "$ref": "#/components/schemas/Substatuses"
          },
          "was_drn_used": {
            "type": "boolean",
            "example": true
          },
          "drn_reason": {
            "type": "string",
            "example": ""
          },
          "order_date": {
            "type": "string",
            "format": "date"
          },
          "repo_date": {
            "type": "string",
            "format": "date-time"
          },
          "close_date": {
            "type": "string",
            "format": "date"
          },
          "hold_date": {
            "type": "string",
            "format": "date"
          },
          "close_reason": {
            "type": "string",
            "example": ""
          },
          "hold_reason": {
            "type": "string",
            "example": ""
          },
          "expiration_date": {
            "type": "string",
            "format": "date"
          },
          "account_info": {
            "$ref": "#/components/schemas/AccountInfo"
          },
          "bankruptcy_type": {
            "type": "string",
            "example": "None"
          },
          "investigator": {
            "type": "integer",
            "example": 0
          },
          "order_type": {
            "$ref": "#/components/schemas/OrderType"
          },
          "vendor": {
            "$ref": "#/components/schemas/Vendor"
          },
          "vendor_branch_name": {
            "type": "string",
            "example": null
          },
          "assigneeid": {
            "type": "integer",
            "example": 1166346
          },
          "assignee_name": {
            "type": "string",
            "example": "test name"
          },
          "order_worker_id": {
            "type": "integer",
            "example": null
          },
          "case_ref_num": {
            "type": "integer",
            "example": null
          },
          "account_num": {
            "type": "string",
            "example": "NEWASSIGNMENT WITH UNIT FIELD"
          },
          "lender": {
            "$ref": "#/components/schemas/Lender"
          },
          "lender_branch_name": {
            "type": "string",
            "example": null
          },
          "lienholder": {
            "$ref": "#/components/schemas/Lienholder"
          },
          "recovery_address": {
            "$ref": "#/components/schemas/AddressSimple"
          },
          "police_agency": {
            "type": "string",
            "example": ""
          },
          "police_badge": {
            "type": "string",
            "example": ""
          },
          "storage_location": {
            "$ref": "#/components/schemas/StorageLocationInfo"
          },
          "storage_location_space": {
            "type": "string",
            "example": null
          },
          "estimated_damage": {
            "type": "integer",
            "example": null
          },
          "estimated_damage_text": {
            "type": "string",
            "example": ""
          },
          "transported_released_to": {
            "type": "integer",
            "example": 0
          },
          "transport_notes": {
            "type": "string",
            "example": null
          },
          "transport_date": {
            "type": "string",
            "format": "date"
          },
          "delivered_released_to": {
            "type": "string",
            "example": null
          },
          "disposition": {
            "$ref": "#/components/schemas/DispositionString"
          },
          "personal_items": {
            "type": "string",
            "example": null
          },
          "has_personals": {
            "type": "boolean",
            "example": true
          },
          "is_drivable": {
            "type": "boolean",
            "example": true
          },
          "has_keys": {
            "type": "boolean",
            "example": true
          },
          "additional_info": {
            "type": "string",
            "example": "Body Style: 4WD Double Cab V6\r\nFour Wheel Drive\r\nEngine: 4 Gasoline Fuel V6 Cylinder Engine\r\n\r\ntesttestetestethgjhdghdg"
          },
          "skip_flag": {
            "type": "boolean",
            "example": true
          },
          "custom_fields": {
            "$ref": "#/components/schemas/CustomFields"
          },
          "police_notified_date": {
            "type": "string",
            "format": "date"
          },
          "police_report_number": {
            "type": "string",
            "example": null
          },
          "odometer_type": {
            "$ref": "#/components/schemas/OdometerType"
          },
          "overall_condition": {
            "$ref": "#/components/schemas/OverallConditionType"
          },
          "dmv": {
            "type": "integer",
            "default": 0
          },
          "key_type": {
            "$ref": "#/components/schemas/KeyType"
          },
          "police_info": {
            "$ref": "#/components/schemas/PoliceInfo"
          },
          "icra": {
            "$ref": "#/components/schemas/ICRAData"
          },
          "additional_collateral": {
            "$ref": "#/components/schemas/Collaterals"
          },
          "violent_case": {
            "$ref": "#/components/schemas/Violence"
          },
          "is_lpr20": {
            "type": "boolean",
            "example": false
          },
          "is_vla": {
            "type": "boolean",
            "example": false
          },
          "time_marked_repossessed": {
            "type": "string",
            "format": "date-time"
          },
          "personal_property_release_date": {
            "type": "string",
            "format": "date-time"
          },
          "fee_to_client": {
            "type": "number",
            "example": null
          },
          "lss_code": {
            "type": "string",
            "example": null
          },
          "tier": {
            "type": "integer",
            "example": 1
          },
          "tier_name": {
            "type": "string",
            "example": "Pre Charge Off Tier 1"
          },
          "sub_branch": {
            "$ref": "#/components/schemas/SubBranch"
          },
          "has_damage": {
            "type": "boolean",
            "example": false
          },
          "recovery_address_id": {
            "type": "integer",
            "example": 12145
          },
          "case_id": {
            "type": "integer",
            "example": 2070410016,
            "default": 0
          },
          "recovery_time_zone": {
            "type": "string",
            "example": "America/New_York"
          }
        }
      },
      "Status": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Status Type- This is an enumerated type. One of the values below must be used.",
            "example": "Repossessed",
            "enum": [
              "Auction",
              "Charged Off",
              "Closed",
              "Closed-Charged Off",
              "Closed-Claim Paid",
              "Closed-Error",
              "Closed-Positive Resolution",
              "Closed-Time",
              "Completed",
              "Completed-Located",
              "Declined Order",
              "Hold For Billing",
              "MGR Denied",
              "Need Info",
              "New From Client",
              "Office Transfer",
              "On Hold",
              "Open",
              "Pending Close",
              "Pending MGR Approval",
              "Pending On Hold",
              "Reassigned",
              "Repossessed",
              "Resolved-Bankruptcy",
              "Resolved-Legal Locate",
              "Resolved-Lien Sold",
              "Resolved-Locate Impound",
              "Resolved-Paid",
              "Resolved-Repossession Invol",
              "Resolved-Repossession Vol",
              "Resolved-Stolen Report"
            ]
          }
        }
      },
      "Substatuses": {
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/SubstatusItem"
          }
        }
      },
      "SubstatusItem": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Substatus"
        }
      },
      "Substatus": {
        "type": "object",
        "properties": {
          "sub_status_id": {
            "type": "integer",
            "example": 0
          },
          "sub_status": {
            "type": "string",
            "example": ""
          }
        }
      },
      "VendorMemberships": {
        "type": "object",
        "properties": {
          "is_Allied_member": {
            "type": "boolean",
            "example": true,
            "default": ""
          },
          "is_ARA_member": {
            "type": "boolean",
            "example": true,
            "default": ""
          },
          "is_DRN_member": {
            "type": "boolean",
            "example": true,
            "default": ""
          },
          "is_LRRP_member": {
            "type": "boolean",
            "example": true,
            "default": ""
          },
          "is_NFA_member": {
            "type": "boolean",
            "example": true,
            "default": ""
          },
          "is_Reliance_member": {
            "type": "boolean",
            "example": true,
            "default": ""
          },
          "is_TFA_member": {
            "type": "boolean",
            "example": true,
            "default": ""
          }
        }
      },
      "Vendor": {
        "type": "object",
        "properties": {
          "lender_vendor_id": {
            "type": "string",
            "example": "def-1234",
            "default": ""
          },
          "vendor_id": {
            "type": "string",
            "example": "90DEMO",
            "default": ""
          },
          "name": {
            "type": "string",
            "example": "1 RDN DEMO"
          },
          "address": {
            "type": "string",
            "example": "1620 S Stapley Dr"
          },
          "city": {
            "type": "string",
            "example": "Mesa"
          },
          "state": {
            "type": "string",
            "example": "AZ"
          },
          "zip_code": {
            "type": "string",
            "example": 85204
          },
          "phone": {
            "type": "string",
            "example": "555-555-5555"
          },
          "fax": {
            "type": "string",
            "example": "555-555-5555"
          },
          "is_limited": {
            "type": "boolean",
            "example": false
          },
          "memberships": {
            "$ref": "#/components/schemas/VendorMemberships"
          },
          "lpr2_assignments_only": {
            "type": "boolean",
            "example": true
          },
          "state_license_number": {
            "type": "string",
            "example": "RA1233/RA939347"
          }
        }
      },
      "Lender": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "integer",
            "example": 101336
          },
          "client_name": {
            "type": "string",
            "example": "RDN Client"
          },
          "phone": {
            "type": "string",
            "example": "555-555-5555"
          },
          "type": {
            "type": "string",
            "example": "Global"
          }
        }
      },
      "Lienholder": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "integer",
            "example": 101336,
            "default": 0
          },
          "client_name": {
            "type": "string",
            "example": "RDN Client",
            "default": ""
          },
          "address": {
            "type": "string",
            "example": "1620 S Stapley Dr"
          },
          "city": {
            "type": "string",
            "example": "Mesa"
          },
          "state": {
            "type": "string",
            "example": "AZ"
          },
          "zip_code": {
            "type": "string",
            "example": 85204
          }
        }
      },
      "AddressSimple": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "example": "1620 S Stapley Dr"
          },
          "city": {
            "type": "string",
            "example": "Mesa"
          },
          "state": {
            "type": "string",
            "example": "AZ"
          },
          "zip": {
            "type": "string",
            "example": 85204
          }
        }
      },
      "ArrayOfStorageLocationInfo": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/StorageLocationInfo"
        }
      },
      "StorageLocationInfo": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/AddressSimple"
          },
          "name": {
            "type": "string",
            "example": "storage location name"
          },
          "phone": {
            "type": "string",
            "example": "222-222-2222",
            "default": ""
          },
          "fax": {
            "type": "string",
            "example": "222-222-2222",
            "default": ""
          },
          "hours": {
            "type": "string",
            "example": "",
            "default": ""
          },
          "lat": {
            "type": "string",
            "example": "30.1580494"
          },
          "long": {
            "type": "string",
            "example": "-90.98791120000001"
          },
          "storage_location_id": {
            "type": "integer",
            "example": "70734"
          }
        }
      },
      "OdometerType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "empty=>Empty,1=>Digital,2=>Analog,3=>5 Digit,4=>6 Digit,5=>N/A)",
            "example": "1",
            "enum": [
              "",
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          }
        }
      },
      "OverallConditionType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "empty=>Empty,1=>None,2=>Excellent,3=>Good,4=>Average,5=>Poor,6=>Junk)",
            "example": "1",
            "enum": [
              "",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6"
            ]
          }
        }
      },
      "KeyType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "empty=>Empty,1=>VAT,2=>Laser,3=>10 Cut,4=>Single Cut,5=>Double Cut,6=>Special,7=>Other)",
            "example": "1",
            "enum": [
              "",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7"
            ]
          }
        }
      },
      "PoliceInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "1620 S Stapley Dr"
          },
          "branch": {
            "type": "string",
            "example": "Mesa"
          },
          "updates_email": {
            "$ref": "#/components/schemas/Email"
          },
          "address": {
            "$ref": "#/components/schemas/AddressSimple"
          },
          "phone": {
            "type": "string",
            "example": "555-555-5555"
          },
          "fax": {
            "type": "string",
            "example": "555-555-5555"
          },
          "toll_free": {
            "type": "string",
            "example": null
          },
          "additional_info": {
            "type": "string",
            "example": null
          },
          "transport_notes": {
            "type": "string",
            "example": null
          },
          "police_id": {
            "type": "integer",
            "example": null
          }
        }
      },
      "ICRAData": {
        "type": "object",
        "properties": {
          "ticket": {
            "type": "string",
            "example": "",
            "default": ""
          },
          "debtor_notified_by": {
            "type": "string",
            "example": "",
            "default": ""
          },
          "debtor_two_notified_by": {
            "type": "string",
            "example": "",
            "default": ""
          },
          "debtor_notified_date": {
            "type": "string",
            "format": "date"
          },
          "debtor_two_notified_date": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "Collaterals": {
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/CollateralsItem"
          }
        }
      },
      "CollateralsItem": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Collateral"
        }
      },
      "Violence": {
        "type": "object",
        "properties": {
          "is_violent": {
            "type": "boolean",
            "example": false
          },
          "violent_debtor": {
            "type": "boolean",
            "example": false
          },
          "violent_cosigner": {
            "type": "boolean",
            "example": false
          },
          "violent_acct": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "SubBranch": {
        "type": "object",
        "properties": {
          "branch_id": {
            "type": "integer",
            "example": null,
            "default": 0
          },
          "branch_name": {
            "type": "string",
            "example": null
          }
        }
      },
      "Email": {
        "type": "object",
        "properties": {
          "Email": {
            "type": "string",
            "example": null
          }
        }
      },
      "SuccessfulOperation": {
        "type": "object",
        "properties": {
          "result": {
            "type": "boolean"
          }
        }
      },
      "BulkCloseCase": {
        "required": [
          "case"
        ],
        "type": "object",
        "properties": {
          "cases": {
            "$ref": "#/components/schemas/ArrayOfInt"
          },
          "reason": {
            "default": null,
            "type": "string",
            "description": "Contains the close reason. Must be type of CloseReason"
          },
          "other_reason": {
            "type": "string",
            "default": null,
            "example": "other reason",
            "description": "Other reason"
          },
          "collector_id": {
            "default": null,
            "type": "string",
            "example": 545185,
            "description": "Collector ID"
          },
          "reason_type": {
            "default": null,
            "description": "Close reason ID, overrides reason if valid. Must be one of the following: [0 => '',1 => 'Customer Paid Current',2 => 'Vehicle Could Not Be Located [Further Investigation Being Conducted]',3 => 'Vehicle Could Not Be Located [No Further Investigation Being Conducted]',4 => 'Vehicle Located But Cannot Be Recovered (Ex. In Garage, Behind Fence, etc.)',5 => 'Lien Holder is Seeking Judicial Recovery Through Litigation',6 => 'Customer Filed Bankruptcy',7 => 'Closed Due to Time',8 => 'Closed Due to Vehicle Being Charged Off [Further Investigation Being Conducted]',  9 => 'Closed Due to Vehicle Being Charged Off [No Further Investigation Being Conducted]',10 => 'Closed for Further Investigation',11 => 'Vehicle Stolen and Police Report Confirmed',12 => 'Identity Theft Confirmed and Purported Customer Is Not In Possession of Vehicle',13 => 'Vehicle Located But Condition of Vehicle Does Not Warrant Recovery',14 => 'Vehicle Located in Impound and Condition of Vehicle Does Not Warrant Recovery',15 => 'Vehicle Impounded and Sold at Lien Sale',16 => 'Other',17 => 'Close - Positive Resolution',18 => 'Closed At Agent Request',19 => 'Closed Due To Fees',20 => 'Closed Due To Inactivity',21 => 'Lien was lost',22 => 'Out of Coverage Area',23 => 'Vehicle Could Not Be Located',24 => 'Vehicle Not Located But Condition of Vehicle Does Not Warrant Recovery',25 => 'Vehicle Located in Impound',26 => 'Violent Customer',27 => 'Assigned in error',28 => 'Close due to skip',29 => 'Close due to change to involuntary repo',30 => 'Close waiting for cure letter to expire',31 => 'Customer paid down',32 => 'Account paid in full',33 => 'Seeking litigation',34 => 'Vehicle Located in Impound',35 => 'Fees Do Not Warrant Recovery',]",
            "type": "string",
            "example": 3
          },
          "return_last": {
            "default": false,
            "type": "boolean",
            "description": "Returns the last event ID if passed true"
          }
        }
      },
      "CloseCase": {
        "required": [
          "case"
        ],
        "type": "object",
        "properties": {
          "case": {
            "type": "integer",
            "format": "int32",
            "example": 2071840027,
            "description": "Case ID"
          },
          "reason": {
            "default": null,
            "type": "string",
            "description": "Contains the close reason. Must be type of CloseReason"
          },
          "other_reason": {
            "type": "string",
            "default": null,
            "example": "other reason",
            "description": "Other reason"
          },
          "collector_id": {
            "default": null,
            "type": "string",
            "example": 545185,
            "description": "Collector ID"
          },
          "reason_type": {
            "default": null,
            "description": "Close reason ID, overrides reason if valid. Must be one of the following: [0 => '',1 => 'Customer Paid Current',2 => 'Vehicle Could Not Be Located [Further Investigation Being Conducted]',3 => 'Vehicle Could Not Be Located [No Further Investigation Being Conducted]',4 => 'Vehicle Located But Cannot Be Recovered (Ex. In Garage, Behind Fence, etc.)',5 => 'Lien Holder is Seeking Judicial Recovery Through Litigation',6 => 'Customer Filed Bankruptcy',7 => 'Closed Due to Time',8 => 'Closed Due to Vehicle Being Charged Off [Further Investigation Being Conducted]',  9 => 'Closed Due to Vehicle Being Charged Off [No Further Investigation Being Conducted]',10 => 'Closed for Further Investigation',11 => 'Vehicle Stolen and Police Report Confirmed',12 => 'Identity Theft Confirmed and Purported Customer Is Not In Possession of Vehicle',13 => 'Vehicle Located But Condition of Vehicle Does Not Warrant Recovery',14 => 'Vehicle Located in Impound and Condition of Vehicle Does Not Warrant Recovery',15 => 'Vehicle Impounded and Sold at Lien Sale',16 => 'Other',17 => 'Close - Positive Resolution',18 => 'Closed At Agent Request',19 => 'Closed Due To Fees',20 => 'Closed Due To Inactivity',21 => 'Lien was lost',22 => 'Out of Coverage Area',23 => 'Vehicle Could Not Be Located',24 => 'Vehicle Not Located But Condition of Vehicle Does Not Warrant Recovery',25 => 'Vehicle Located in Impound',26 => 'Violent Customer',27 => 'Assigned in error',28 => 'Close due to skip',29 => 'Close due to change to involuntary repo',30 => 'Close waiting for cure letter to expire',31 => 'Customer paid down',32 => 'Account paid in full',33 => 'Seeking litigation',34 => 'Vehicle Located in Impound',35 => 'Fees Do Not Warrant Recovery',]",
            "type": "string",
            "example": 3
          },
          "return_last": {
            "default": false,
            "type": "boolean",
            "description": "Returns the last event ID if passed true"
          }
        }
      },
      "FirehoseData": {
        "type": "object",
        "properties": {
          "max_event_id": {
            "type": "string"
          },
          "meta_data": {
            "type": "object",
            "properties": {
              "item": {
                "$ref": "#/components/schemas/ArrayOfFirehoseMetaData"
              }
            }
          }
        }
      },
      "ArrayOfFirehoseMetaData": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/FirehoseMetaData"
        }
      },
      "FirehoseMetaData": {
        "type": "object",
        "properties": {
          "event_type": {
            "type": "integer"
          },
          "case_id": {
            "type": "integer"
          },
          "old": {
            "type": "string"
          },
          "new": {
            "type": "string"
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time"
          },
          "additional": {
            "type": "string"
          },
          "event_id": {
            "type": "string"
          }
        }
      },
      "ChangeCaseOrderType": {
        "required": [
          "case_id",
          "order_type"
        ],
        "type": "object",
        "properties": {
          "case_id": {
            "type": "integer",
            "format": "int32",
            "example": 2070445349
          },
          "order_type": {
            "$ref": "#/components/schemas/OrderType"
          }
        }
      },
      "CaseID": {
        "required": [
          "case"
        ],
        "type": "object",
        "properties": {
          "case": {
            "type": "integer",
            "format": "int32",
            "description": "Case ID",
            "example": 2070445349
          }
        }
      },
      "UpdateID": {
        "required": [
          "update_id"
        ],
        "type": "object",
        "properties": {
          "update_id": {
            "type": "string",
            "example": "1188721405",
            "description": "Update ID"
          }
        }
      },
      "GetUpdateResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/UpdateItem"
          }
        }
      },
      "GetCaseUpdatesResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ArrayOfUpdates"
          },
          "pager": {
            "$ref": "#/components/schemas/Pager"
          }
        }
      },
      "Pager": {
        "type": "object",
        "properties": {
          "page": {
            "example": 1,
            "type": "integer"
          },
          "per-page": {
            "example": 100,
            "type": "integer"
          },
          "next-page": {
            "example": null,
            "type": "integer"
          },
          "page_items": {
            "example": 1,
            "type": "integer"
          },
          "total_items": {
            "example": 1,
            "type": "integer"
          },
          "total_pages": {
            "example": 1,
            "type": "integer"
          }
        }
      },
      "RecentUpdatesForCase": {
        "type": "object",
        "properties": {
          "case_id": {
            "type": "integer",
            "example": 2149964689
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "example": "2020-06-01T00:00:00.000Z"
          }
        }
      },
      "ArrayOfUpdates": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/UpdateItem"
        }
      },
      "GetFireHose": {
        "required": [
          "last_event_id"
        ],
        "type": "object",
        "properties": {
          "last_event_id": {
            "type": "string",
            "description": "auto_increment key (send as a string as these can be larger than an 'int')",
            "example": 2149964689
          },
          "show_lender_events": {
            "type": "boolean",
            "default": false,
            "example": false,
            "description": "Send show_lender_events as true if you want firehose to return events intiated using the api"
          },
          "event_type_ids": {
            "type": "object",
            "description": "Includes all event types by default",
            "properties": {
              "item": {
                "type": "array",
                "example": [
                  200,
                  300
                ],
                "items": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "SuccessfulOperationString": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string"
          }
        }
      },
      "GetCaseStatusResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Status Type- This is an enumerated type. One of the values below must be used.",
            "example": "Repossessed",
            "enum": [
              "Auction",
              "Charged Off",
              "Closed",
              "Closed-Charged Off",
              "Closed-Claim Paid",
              "Closed-Error",
              "Closed-Positive Resolution",
              "Closed-Time",
              "Completed",
              "Completed-Located",
              "Declined Order",
              "Hold For Billing",
              "MGR Denied",
              "Need Info",
              "New From Client",
              "Office Transfer",
              "On Hold",
              "Open",
              "Pending Close",
              "Pending MGR Approval",
              "Pending On Hold",
              "Reassigned",
              "Repossessed",
              "Resolved-Bankruptcy",
              "Resolved-Legal Locate",
              "Resolved-Lien Sold",
              "Resolved-Locate Impound",
              "Resolved-Paid",
              "Resolved-Repossession Invol",
              "Resolved-Repossession Vol",
              "Resolved-Stolen Report"
            ]
          }
        }
      },
      "Cases": {
        "required": [
          "cases"
        ],
        "type": "object",
        "properties": {
          "cases": {
            "type": "object",
            "properties": {
              "item": {
                "$ref": "#/components/schemas/ArrayOfInt"
              }
            }
          }
        }
      },
      "ArrayOfInt": {
        "type": "array",
        "items": {
          "type": "integer",
          "example": 2070445349
        }
      },
      "ArrayOfRdnCaseSimple": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/RdnCaseSimple"
        }
      },
      "RdnCaseSimple": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "Pending Close",
            "description": "Status Values: [Auction, Charged Off, Closed, Closed-Charged Off, Closed-Claim Paid, Closed-Error, Closed-Positive Resolution, Closed-Time, Completed, Completed-Located, Declined Order, Hold For Billing, MGR Denied, Need Info, New From Client, Office Transfer, On Hold, Open, Pending Close, Pending MGR Approval, Pending On Hold, Reassigned, Repossessed, Resolved-Bankruptcy Resolved-Legal Locate, Resolved-Lien Sold, Resolved-Locate Impound, Resolved-Paid, Resolved-Repossession Invol, Resolved-Repossession Vol, Resolved-Stolen Report]"
          },
          "case_id": {
            "type": "integer",
            "example": 2070556284,
            "default": 0
          }
        }
      },
      "StringArray": {
        "description": "Array of string",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "ArrayOfRdnCaseInfo": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/RdnCaseInfo"
        }
      },
      "GetConditionReportsResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ConditionReportContainer"
          }
        }
      },
      "ConditionReportContainer": {
        "type": "object",
        "properties": {
          "arcadia": {
            "$ref": "#/components/schemas/ConditionReportArcadia"
          },
          "cac": {
            "$ref": "#/components/schemas/ConditionReportCac"
          },
          "car": {
            "$ref": "#/components/schemas/ConditionReportCar"
          },
          "company": {
            "$ref": "#/components/schemas/ConditionReportCompany"
          },
          "motoatv": {
            "$ref": "#/components/schemas/ConditionReportMotoatv"
          },
          "nuvell": {
            "$ref": "#/components/schemas/ConditionReportNuvell"
          },
          "onyx": {
            "$ref": "#/components/schemas/ConditionReportOnyx"
          },
          "par": {
            "$ref": "#/components/schemas/ConditionReportPar"
          },
          "rac": {
            "$ref": "#/components/schemas/ConditionReportRac"
          },
          "renaissance": {
            "$ref": "#/components/schemas/ConditionReportRenaissance"
          },
          "rv": {
            "$ref": "#/components/schemas/ConditionReportRv"
          },
          "truck": {
            "$ref": "#/components/schemas/ConditionReportTruck"
          },
          "watercraft": {
            "$ref": "#/components/schemas/ConditionReportWatercraft"
          },
          "harley": {
            "$ref": "#/components/schemas/ConditionReportHarley"
          },
          "capitalone": {
            "$ref": "#/components/schemas/ConditionReportCapitalOne"
          },
          "ally": {
            "$ref": "#/components/schemas/ConditionReportAlly"
          }
        }
      },
      "ConditionReportArcadia": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "crdate": {
            "default": "",
            "type": "string",
            "format": "date-time"
          },
          "does_it_run": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "collision_damage": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "front_bumper": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "grille": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "hood": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "roof": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "lffender": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "lfdoor": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "lrdoor": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "lrfender": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "rbumper": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "trunk_lid": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "rrfender": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "rrdoor": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "rffender": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "rfdoor": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "paint": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "windshield": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "lfront_glass": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "lrear_glass": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "rear_window": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "rrear_glass": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "rfront_glass": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "automatic": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "ac": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "alarm": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "amfm": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "dash": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "inst_panel": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "f_seats": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "r_seats": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "headliner": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "carpet": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "engine": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "trans": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "clutch": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "brakes": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "battery": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "hd_lights": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "tl_lights": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "l_front_tire": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "l_rear_tire": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "spare": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "jack": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "r_rear_tire": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "r_front_tire": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "power_steering": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "power_locks": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "power_window": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "power_seats": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGenericNullable"
              }
            ]
          },
          "general_notes": {
            "default": "",
            "type": "string"
          },
          "delivered_to_auction": {
            "default": "",
            "type": "string"
          },
          "client_printed": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          }
        }
      },
      "ConditionReportCac": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "crdate": {
            "default": "",
            "type": "string",
            "format": "date-time"
          },
          "cac_type": {
            "default": "Car",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCacVehicleType"
              }
            ]
          },
          "power_roof": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "automatic": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "amfm": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "pop_roof": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "four_speed": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "amfmcass": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "ttop": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "five_speed": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "amfmcasscd": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "convertible": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "dvd": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "satellite": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "power_windows": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "power_locks": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "tilt": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "power_seats": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "power_steering": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "cc": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "alloy_wheels": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "leather_seats": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "ac": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "camper_shell": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "dsfqp": {
            "default": "default",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCacConditionBody"
              }
            ]
          },
          "dsfd": {
            "default": "default",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCacConditionBody"
              }
            ]
          },
          "dsrd": {
            "default": "default",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCacConditionBody"
              }
            ]
          },
          "dsbed": {
            "default": "default",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCacConditionBody"
              }
            ]
          },
          "psfqp": {
            "default": "default",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCacConditionBody"
              }
            ]
          },
          "psfd": {
            "default": "default",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCacConditionBody"
              }
            ]
          },
          "psrd": {
            "default": "default",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCacConditionBody"
              }
            ]
          },
          "psbed": {
            "default": "default",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCacConditionBody"
              }
            ]
          },
          "hood": {
            "default": "default",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCacConditionBody"
              }
            ]
          },
          "roof": {
            "default": "default",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCacConditionBody"
              }
            ]
          },
          "tailgate": {
            "default": "default",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCacConditionBody"
              }
            ]
          },
          "fbumper": {
            "default": "default",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCacConditionBody"
              }
            ]
          },
          "rbumper": {
            "default": "default",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCacConditionBody"
              }
            ]
          },
          "mirrors": {
            "default": "default",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCacConditionBody"
              }
            ]
          },
          "wheel_covers": {
            "default": "0",
            "type": "integer"
          },
          "comments": {
            "default": "",
            "type": "string"
          },
          "stock_number": {
            "default": "",
            "type": "string"
          },
          "stock_date": {
            "default": "0000-00-00",
            "type": "string",
            "format": "date"
          },
          "cust_name": {
            "default": "",
            "type": "string"
          },
          "cust_date": {
            "default": "0000-00-00",
            "type": "string",
            "format": "date"
          },
          "auction_rep": {
            "default": "",
            "format": "string"
          },
          "auction_date": {
            "default": "0000-00-00",
            "type": "string",
            "format": "date"
          },
          "transporter": {
            "default": "",
            "type": "string"
          },
          "transporter_date": {
            "default": "0000-00-00",
            "type": "string",
            "format": "date"
          },
          "tires": {
            "default": "default",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCacConditionTires"
              }
            ]
          },
          "glass": {
            "default": "default",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCacConditionGlass"
              }
            ]
          },
          "gc": {
            "default": "default",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCacConditionEngine"
              }
            ]
          },
          "no_radio": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "dash": {
            "default": "default",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCacConditionGeneric"
              }
            ]
          },
          "i_panel": {
            "default": "default",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCacConditionGeneric"
              }
            ]
          },
          "f_seats": {
            "default": "default",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCacConditionGeneric"
              }
            ]
          },
          "r_seats": {
            "default": "default",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCacConditionGeneric"
              }
            ]
          },
          "headliner": {
            "default": "default",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCacConditionGeneric"
              }
            ]
          },
          "carpet": {
            "default": "default",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCacConditionGeneric"
              }
            ]
          },
          "client_printed": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          }
        }
      },
      "ConditionReportCar": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "crdate": {
            "default": "",
            "type": "string",
            "format": "date-time"
          },
          "general_condition": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGeneral"
              }
            ],
            "default": "good"
          },
          "mechanical_condition": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionMechanical"
              }
            ]
          },
          "interior_condition": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionInterior"
              }
            ]
          },
          "ignition_keys": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseKeyStatus"
              }
            ]
          },
          "secondary_keys": {
            "default": "N/A",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseKeySecondaryStatus"
              }
            ]
          },
          "battery": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBatteryStatus"
              }
            ]
          },
          "vehicle_type": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCarVehicleType"
              }
            ]
          },
          "roof": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseRoofType"
              }
            ]
          },
          "transmission": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseTransmissionType"
              }
            ]
          },
          "stereo": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseStereoType"
              }
            ]
          },
          "power_windows": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "power_seats": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "leather_seats": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "power_locks": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "power_steering": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "alloy_wheels": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "tilt_wheel": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "cruise_control": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "ac": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "diesel": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "rear_ac": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "body": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBodyOverall"
              }
            ]
          },
          "paint": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionPaint"
              }
            ]
          },
          "able_to_drive": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseDrivableStatus"
              }
            ]
          },
          "driver_front_quarter_panel": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "driver_front_door": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "driver_rear_door": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "driver_rear_quarter_panel": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "driver_pu_bed": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "passenger_front_quarter_panel": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "passenger_front_door": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "passenger_rear_door": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "passenger_rear_quarter_panel": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "passenger_pu_bed": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "hood": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "roof_detail": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "trunk": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "tailgate_hatchback": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "bumper_front": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBumper"
              }
            ]
          },
          "bumper_rear": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBumper"
              }
            ]
          },
          "glass": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGlass"
              }
            ]
          },
          "tire_lf": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionTire"
              }
            ]
          },
          "tire_lr": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionTire"
              }
            ]
          },
          "tire_rf": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionTire"
              }
            ]
          },
          "tire_rr": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionTire"
              }
            ]
          },
          "tire_spare": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionTireSpare"
              }
            ]
          },
          "wheel_cover_count": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseWheelCoverCount"
              }
            ]
          },
          "notes": {
            "default": "",
            "type": "string"
          },
          "details": {
            "default": "",
            "type": "string"
          },
          "glass_details": {
            "default": "",
            "type": "string"
          },
          "completed_by": {
            "default": "",
            "type": "string"
          },
          "client_printed": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          }
        }
      },
      "ConditionReportCompany": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "crdate": {
            "default": "",
            "type": "string",
            "format": "date-time"
          },
          "body_type": {
            "default": "2-door",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyBodyType"
              }
            ]
          },
          "engine_type": {
            "default": "4cyl",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyEngineType"
              }
            ]
          },
          "transmission_type": {
            "default": "Automatic",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyTransmissionType"
              }
            ]
          },
          "ac": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "cruise": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "power_windows": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "power_seats": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "radio_type": {
            "default": "None",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyStereoType"
              }
            ]
          },
          "interior_type": {
            "default": "Vinyl",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyInteriorType"
              }
            ]
          },
          "rear_ac": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "awd_4x4": {
            "default": "N/A",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseDrivetrainType"
              }
            ]
          },
          "alloy_wheels": {
            "default": "Alloy",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseWheelType"
              }
            ]
          },
          "sunroof": {
            "default": "Manual",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseSunroofType"
              }
            ]
          },
          "overall_condition": {
            "default": "Clean",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionOverall"
              }
            ]
          },
          "collision_damage": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseDamage"
              }
            ]
          },
          "tire_condition": {
            "default": "Good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionTire"
              }
            ]
          },
          "windshield": {
            "default": "Ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionGlass"
              }
            ]
          },
          "windows": {
            "default": "Ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionGlass"
              }
            ]
          },
          "paint_condition": {
            "default": "Ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionPaint"
              }
            ]
          },
          "front_bumper": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionGeneral"
              }
            ]
          },
          "grill": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionGeneral"
              }
            ]
          },
          "hood": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionGeneral"
              }
            ]
          },
          "lf_fender": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionGeneral"
              }
            ]
          },
          "lf_door": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionGeneral"
              }
            ]
          },
          "lr_door": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionGeneral"
              }
            ]
          },
          "l_qtr_panel": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionGeneral"
              }
            ]
          },
          "deck_lid": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionGeneral"
              }
            ]
          },
          "rear_bumper": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionGeneral"
              }
            ]
          },
          "r_qtr_panel": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionGeneral"
              }
            ]
          },
          "rr_door": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionGeneral"
              }
            ]
          },
          "rf_door": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionGeneral"
              }
            ]
          },
          "rf_fender": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionGeneral"
              }
            ]
          },
          "roof": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionGeneral"
              }
            ]
          },
          "engine": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionMechanical"
              }
            ]
          },
          "transmission": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionMechanical"
              }
            ]
          },
          "clutch": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionMechanical"
              }
            ]
          },
          "brakes": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionMechanical"
              }
            ]
          },
          "battery": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionMechanical"
              }
            ]
          },
          "carpets": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionInterior"
              }
            ]
          },
          "seats": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionInterior"
              }
            ]
          },
          "headliner": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionInterior"
              }
            ]
          },
          "door_card": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionInterior"
              }
            ]
          },
          "carpets2": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCompanyConditionInterior"
              }
            ]
          },
          "additional_personal_property": {
            "default": "",
            "type": "string"
          },
          "general_notes": {
            "default": "",
            "type": "string"
          },
          "wheel_cover_count": {
            "default": "",
            "type": "string"
          },
          "trim_package": {
            "default": "",
            "type": "string"
          },
          "client_printed": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          }
        }
      },
      "ConditionReportMotoatv": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "crdate": {
            "default": "",
            "type": "string"
          },
          "general_condition": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGeneral"
              }
            ]
          },
          "mechanical_condition": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionMechanical"
              }
            ]
          },
          "interior_condition": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionInterior"
              }
            ]
          },
          "ignition_keys": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseKeyStatus"
              }
            ]
          },
          "secondary_keys": {
            "default": "N/A",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseKeySecondaryStatus"
              }
            ]
          },
          "battery": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBatteryStatus"
              }
            ]
          },
          "vehicle_type": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvVehicleType"
              }
            ]
          },
          "seats": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvConditionSeats"
              }
            ]
          },
          "drive_train": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvDrivetrainType"
              }
            ]
          },
          "stereo": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvStereoType"
              }
            ]
          },
          "windshield": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "fairing": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "saddle_bags": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "electric_starter": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "trunk": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "kickstand": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "headlight": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "cruise_control": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "sissie_bar": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "cb_radio": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "alarm": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "cover": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "body": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvConditionBodyOverall"
              }
            ]
          },
          "paint": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvConditionPaint"
              }
            ]
          },
          "able_to_drive": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "front_fender": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvConditionFrame"
              }
            ]
          },
          "front_wheel": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvConditionFender"
              }
            ]
          },
          "r_side_body": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvConditionBody"
              }
            ]
          },
          "r_side_frame": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvConditionFrame"
              }
            ]
          },
          "r_side_gas_tank": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvConditionFrame"
              }
            ]
          },
          "rear_fender": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvConditionFrame"
              }
            ]
          },
          "rear_wheel": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvConditionFender"
              }
            ]
          },
          "l_side_body": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvConditionBody"
              }
            ]
          },
          "l_side_frame": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvConditionFrame"
              }
            ]
          },
          "l_side_gas_tank": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvConditionFrame"
              }
            ]
          },
          "speedometer": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvConditionElectonics"
              }
            ]
          },
          "tachometer": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvConditionElectonics"
              }
            ]
          },
          "turn_signals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvConditionElectonics"
              }
            ]
          },
          "chrome": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvChrome"
              }
            ]
          },
          "front_bunper": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvConditionBumper"
              }
            ]
          },
          "rear_bumper": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvConditionBumper"
              }
            ]
          },
          "glass": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvConditionGlass"
              }
            ]
          },
          "l_front_tire": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvConditionTire"
              }
            ]
          },
          "l_rear_tire": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvConditionTire"
              }
            ]
          },
          "r_front_tire": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvConditionTire"
              }
            ]
          },
          "r_rear_tire": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvConditionTire"
              }
            ]
          },
          "spare_tire": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportMotoatvConditionTire"
              }
            ]
          },
          "notes": {
            "default": "",
            "type": "string"
          },
          "details": {
            "default": "",
            "type": "string"
          },
          "glass_details": {
            "default": "",
            "type": "string"
          },
          "completed_by": {
            "default": "",
            "type": "string"
          },
          "client_printed": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          }
        }
      },
      "ConditionReportNuvell": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "crdate": {
            "default": "",
            "type": "string",
            "format": "date-time"
          },
          "body_type": {
            "default": "2-door",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellBodyType"
              }
            ]
          },
          "engine_type": {
            "default": "4cyl",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellEngineType"
              }
            ]
          },
          "transmission_type": {
            "default": "Automatic",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellTransmissionType"
              }
            ]
          },
          "ac": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "cruise": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "power_windows": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "power_seats": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "radio_type": {
            "default": "None",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellStereoType"
              }
            ]
          },
          "interior_type": {
            "default": "Vinyl",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellInteriorType"
              }
            ]
          },
          "rear_ac": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "awd_4x4": {
            "default": "N/A",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseDrivetrainType"
              }
            ]
          },
          "alloy_wheels": {
            "default": "Alloy",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseWheelType"
              }
            ]
          },
          "sunroof": {
            "default": "Manual",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseSunroofType"
              }
            ]
          },
          "overall_condition": {
            "default": "Clean",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionOverall"
              }
            ]
          },
          "collision_damage": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseDamage"
              }
            ]
          },
          "tire_condition": {
            "default": "Good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionTire"
              }
            ]
          },
          "windshield": {
            "default": "Ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionGlass"
              }
            ]
          },
          "windows": {
            "default": "Ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionGlass"
              }
            ]
          },
          "paint_condition": {
            "default": "Ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionPaint"
              }
            ]
          },
          "front_bumper": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionGeneral"
              }
            ]
          },
          "grill": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionGeneral"
              }
            ]
          },
          "hood": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionGeneral"
              }
            ]
          },
          "lf_fender": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionGeneral"
              }
            ]
          },
          "lf_door": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionGeneral"
              }
            ]
          },
          "lr_door": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionGeneral"
              }
            ]
          },
          "l_qtr_panel": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionGeneral"
              }
            ]
          },
          "deck_lid": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionGeneral"
              }
            ]
          },
          "rear_bumper": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionGeneral"
              }
            ]
          },
          "r_qtr_panel": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionGeneral"
              }
            ]
          },
          "rr_door": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionGeneral"
              }
            ]
          },
          "rf_door": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionGeneral"
              }
            ]
          },
          "rf_fender": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionGeneral"
              }
            ]
          },
          "roof": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionGeneral"
              }
            ]
          },
          "engine": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionMechanical"
              }
            ]
          },
          "transmission": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionMechanical"
              }
            ]
          },
          "clutch": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionMechanical"
              }
            ]
          },
          "brakes": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionMechanical"
              }
            ]
          },
          "battery": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionMechanical"
              }
            ]
          },
          "carpets": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionInterior"
              }
            ]
          },
          "seats": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionInterior"
              }
            ]
          },
          "headliner": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionInterior"
              }
            ]
          },
          "door_card": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionInterior"
              }
            ]
          },
          "carpets2": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportNuvellConditionInterior"
              }
            ]
          },
          "additional_personal_property": {
            "default": "",
            "type": "string"
          },
          "general_notes": {
            "default": "",
            "type": "string"
          },
          "wheel_cover_count": {
            "default": "",
            "type": "string"
          },
          "trim_package": {
            "default": "",
            "type": "string"
          },
          "client_printed": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          }
        }
      },
      "ConditionReportOnyx": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "crdate": {
            "default": "",
            "type": "string",
            "format": "date-time"
          },
          "vehicle_pickup": {
            "default": "Towed",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportOnyxPickupType"
              }
            ]
          },
          "vehicle_type": {
            "default": "DE",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportOnyxVehicleType"
              }
            ]
          },
          "condition": {
            "default": "Good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportOnyxConditionGeneral"
              }
            ]
          },
          "engine_type": {
            "default": "4cyl",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportOnyxEngineType"
              }
            ]
          },
          "driveable": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "collision_damage": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "need_insurance": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "auto_trans": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "power_steering": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "air_bag": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "cassette": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "cd": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "cd_stacker": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "power_locks": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "tilt_wheel": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "cruise_control": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "power_seats": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "power_windows": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "power_mirrors": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "sunroof": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "moonroof": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "t_top": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "luggage_rack": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "tu_tone": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "leather": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "custom_wheels": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "third_seat": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "quad_seats": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "high_back_bucket": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "capt_chairs": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "alloy_wheels": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "dual_tanks": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "tow_package": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "bedliner": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "privacy_glass": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "running_boards": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "anti_theft": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "dual_r_wheels": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "fourXfour": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "extra_cab": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "long_bed": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "PU_shell": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "integrated_phone": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "air_cond": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "spoiler": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "manual_transmission": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "short_bed": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "bumper": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "sliding_r_window": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "sunscreen": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "sle_trim": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "sls_trim": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "slt_trim": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "abs": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "gen_notes": {
            "default": "",
            "type": "string"
          },
          "storage_day": {
            "default": "",
            "type": "string"
          },
          "engine_other": {
            "default": "",
            "type": "string"
          },
          "completed_by": {
            "default": "",
            "type": "string"
          },
          "client_printed": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          }
        }
      },
      "ConditionReportPar": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "crdate": {
            "default": "",
            "type": "string",
            "format": "date-time"
          },
          "body_style": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParBodyType"
              }
            ]
          },
          "odometer_type": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParOdometerType"
              }
            ]
          },
          "region_branch": {
            "default": "",
            "type": "string"
          },
          "law_enforcement_notified": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "date_of_notification": {
            "default": "",
            "type": "string",
            "format": "date-time"
          },
          "exterior_front_bumper": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionBody"
              }
            ]
          },
          "exterior_grill": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionBody"
              }
            ]
          },
          "exterior_head_lights": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionBody"
              }
            ]
          },
          "exterior_f_splash_pan": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionBody"
              }
            ]
          },
          "exterior_hood_deck_lid": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionBody"
              }
            ]
          },
          "exterior_roof": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionBody"
              }
            ]
          },
          "exterior_lf_fender": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionBody"
              }
            ]
          },
          "exterior_lf_door": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionBody"
              }
            ]
          },
          "exterior_lr_door": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionBody"
              }
            ]
          },
          "exterior_lr_fender": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionBody"
              }
            ]
          },
          "exterior_rr_fender": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionBody"
              }
            ]
          },
          "exterior_rr_door": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionBody"
              }
            ]
          },
          "exterior_rf_door": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionBody"
              }
            ]
          },
          "exterior_rf_fender": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionBody"
              }
            ]
          },
          "exterior_trunk_lid": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionBody"
              }
            ]
          },
          "exterior_tail_gate": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionBody"
              }
            ]
          },
          "exterior_tail_lights": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionBody"
              }
            ]
          },
          "exterior_r_splash_pan": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionBody"
              }
            ]
          },
          "exterior_r_bumper": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionBody"
              }
            ]
          },
          "exterior_rear_back_bed": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionBody"
              }
            ]
          },
          "exterior_truck_bed": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionBody"
              }
            ]
          },
          "exterior_lf_quarter_panel": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionBody"
              }
            ]
          },
          "exterior_lr_quarter_panel": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionBody"
              }
            ]
          },
          "exterior_rf_quarter_panel": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionBody"
              }
            ]
          },
          "exterior_rr_quarter_panel": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionBody"
              }
            ]
          },
          "mechanical_engine": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionMechanical"
              }
            ]
          },
          "mechanical_transmission": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionMechanical"
              }
            ]
          },
          "mechanical_clutch": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionMechanical"
              }
            ]
          },
          "mechanical_brakes": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionMechanical"
              }
            ]
          },
          "mechanical_battery": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionMechanical"
              }
            ]
          },
          "engine_type": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParEngineType"
              }
            ]
          },
          "trans_type": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParTransmissionType"
              }
            ]
          },
          "drive_type": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParDrivetrainType"
              }
            ]
          },
          "roof_type": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParRoofType"
              }
            ]
          },
          "tires_l_front": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionTire"
              }
            ]
          },
          "tires_r_front": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionTire"
              }
            ]
          },
          "tires_l_rear": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionTire"
              }
            ]
          },
          "tires_r_rear": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionTire"
              }
            ]
          },
          "tires_spare": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionTire"
              }
            ]
          },
          "tires_wheel_covers": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionTire"
              }
            ]
          },
          "wheels_type": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParWheelType"
              }
            ]
          },
          "glass_windshield": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionGlass"
              }
            ]
          },
          "glass_l_front": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionGlass"
              }
            ]
          },
          "glass_r_front": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionGlass"
              }
            ]
          },
          "glass_l_rear": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionGlass"
              }
            ]
          },
          "glass_r_rear": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionGlass"
              }
            ]
          },
          "paint_chipped": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "paint_mismatched": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "paint_keyed": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "paint_oxidized": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "paint_not_original_color": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "paint_bondo_showing": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "interior_dash": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionInterior"
              }
            ]
          },
          "interior_f_seats": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionInterior"
              }
            ]
          },
          "interior_r_seats": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionInterior"
              }
            ]
          },
          "interior_door_panels": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionInterior"
              }
            ]
          },
          "interior_mats_carpet": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionInterior"
              }
            ]
          },
          "interior_headliner": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionInterior"
              }
            ]
          },
          "interior_fabric": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionInterior"
              }
            ]
          },
          "vinyl": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "leather": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "cloth": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "air_conditioning": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "rear_air_conditioning": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "cruise_control": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "rear_defroster": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "power_steering": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "power_locks": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "power_windows": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "tilt_steering": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "other_equipment": {
            "default": "",
            "type": "string"
          },
          "keys_type": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParKeyType"
              }
            ]
          },
          "am_fm": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "compact_disc": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "cassette": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "multi_cd": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "aftermarket": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "dvd_vcr": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "overall_condition": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportParConditionOverall"
              }
            ]
          },
          "client_printed": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "par_stock": {
            "default": "",
            "type": "string"
          },
          "vehicle_available": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "collision_damage": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "over_1000": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "fourcylinder": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "sixcylinder": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "eightcylinder": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "diesel": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "other": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "automatic": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "manual": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "twowheeldrive": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "fourwheeldrive": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "fourbyfour": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "awd": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "na": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "hardtop": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "sunroof_manual": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "sunroof_power": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "sunroof_ttop": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "moonroof": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "standard": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "alloyed": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "chrome": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "wheels_aftermarket": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "chipped": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "mismatched": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "keyed": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "not_original_color": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "bondo_showing": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "nokeys": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "vat": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "tencut": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "sglecut": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "splcut": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "laser": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "excellent": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "good": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "average": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "poor": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "junk": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "fair": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "has_personal_property": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          }
        }
      },
      "ConditionReportRac": {
        "type": "object",
        "properties": {
          "dbid": {
            "type": "integer"
          },
          "doors": {
            "default": "",
            "type": "string"
          },
          "cyl": {
            "default": "",
            "type": "string"
          },
          "digital": {
            "default": "yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacBooleanGeneric"
              }
            ]
          },
          "has_keys": {
            "default": "yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacBooleanGeneric"
              }
            ]
          },
          "driveable": {
            "default": "yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacBooleanGeneric"
              }
            ]
          },
          "coldamage": {
            "default": "yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacBooleanGeneric"
              }
            ]
          },
          "inscl": {
            "default": "yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacBooleanGeneric"
              }
            ]
          },
          "hoodmetal": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionBody"
              }
            ]
          },
          "hoodpaint": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionPaint"
              }
            ]
          },
          "grillemetal": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionBody"
              }
            ]
          },
          "grillepaint": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionPaint"
              }
            ]
          },
          "front_bumpermetal": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionBody"
              }
            ]
          },
          "front_bumperpaint": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionPaint"
              }
            ]
          },
          "topmetal": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionBody"
              }
            ]
          },
          "toppaint": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionPaint"
              }
            ]
          },
          "dr_f_fendermetal": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionBody"
              }
            ]
          },
          "dr_f_fenderpaint": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionPaint"
              }
            ]
          },
          "dr_f_doormetal": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionBody"
              }
            ]
          },
          "dr_f_doorpaint": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionPaint"
              }
            ]
          },
          "dr_r_doormetal": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionBody"
              }
            ]
          },
          "dr_r_doorpaint": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionPaint"
              }
            ]
          },
          "dr_r_fendermetal": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionBody"
              }
            ]
          },
          "dr_r_fenderpaint": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionPaint"
              }
            ]
          },
          "back_doormetal": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionBody"
              }
            ]
          },
          "back_doorpaint": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionPaint"
              }
            ]
          },
          "trunkmetal": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionBody"
              }
            ]
          },
          "trunkpaint": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionPaint"
              }
            ]
          },
          "tailgatemetal": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionBody"
              }
            ]
          },
          "tailgatepaint": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionPaint"
              }
            ]
          },
          "bed_linermetal": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionBody"
              }
            ]
          },
          "bed_linerpaint": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionPaint"
              }
            ]
          },
          "ps_r_fendermetal": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionBody"
              }
            ]
          },
          "ps_r_fenderpaint": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionPaint"
              }
            ]
          },
          "ps_r_doormetal": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionBody"
              }
            ]
          },
          "ps_r_doorpaint": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionPaint"
              }
            ]
          },
          "ps_f_doormetal": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionBody"
              }
            ]
          },
          "ps_f_doorpaint": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionPaint"
              }
            ]
          },
          "ps_f_fendermetal": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionBody"
              }
            ]
          },
          "ps_f_fenderpaint": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionPaint"
              }
            ]
          },
          "engine": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "trans": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "battery": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "brakes": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "ac": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "fuel": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "shield": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "sideglass": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "rearglass": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "mirrors": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "headlights": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "taillights": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "autotrans": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "mantrans": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "powerwindows": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "powerseats": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "powerlocks": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "cruise": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "sunroof": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "wheels": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "dualair": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "radio": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "cd": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "dvd": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "convertible": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "kcab": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "leather": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "fourwheeldrive": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "diesel": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "DFRONTTIRE": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "DREARTIRE": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "PFRONTTIRE": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "PREARTIRE": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "spare": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "seats": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "carpet": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "headliners": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "comments": {
            "type": "string"
          },
          "overallpaint": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionPaint"
              }
            ]
          },
          "overallmetal": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionBody"
              }
            ]
          },
          "title_ready": {
            "type": "string"
          },
          "claim_pend": {
            "type": "string"
          },
          "warr_avail": {
            "type": "string"
          },
          "date_redemption_exp": {
            "type": "string"
          },
          "repo_fees": {
            "type": "string"
          },
          "loan_bal": {
            "type": "string"
          },
          "prepared_by": {
            "type": "string"
          },
          "date_prepared": {
            "type": "string"
          },
          "options_match": {
            "type": "string"
          },
          "black_book": {
            "type": "string"
          },
          "repo_expense": {
            "type": "string"
          },
          "mile_adj": {
            "type": "string"
          },
          "avg_black_book": {
            "type": "string"
          },
          "damage_cost": {
            "type": "string"
          },
          "date_title_mailed": {
            "type": "string"
          },
          "actual_value": {
            "type": "string"
          },
          "orig_date_ass": {
            "type": "string"
          },
          "liq_meth": {
            "type": "string"
          },
          "orig_ass_by": {
            "type": "string"
          },
          "orig_location": {
            "type": "string"
          },
          "orig_arr_date": {
            "type": "string"
          },
          "sold_date": {
            "type": "string"
          },
          "sold_amt": {
            "type": "string"
          },
          "trans_cost": {
            "type": "string"
          },
          "repair_cost": {
            "type": "string"
          },
          "detail_costs": {
            "type": "string"
          },
          "auction_fees": {
            "type": "string"
          },
          "storage_fees": {
            "type": "string"
          },
          "checks_expenses": {
            "type": "string"
          },
          "total_exp": {
            "type": "string"
          },
          "net_proceeds": {
            "type": "string"
          },
          "final_method": {
            "type": "string"
          },
          "closed_date": {
            "type": "string"
          },
          "payoff_amt": {
            "type": "string"
          },
          "RegionalRepoDate": {
            "default": "",
            "type": "string",
            "format": "date-time"
          },
          "client_printed": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "headlightsmetal": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionBody"
              }
            ]
          },
          "headlightspaint": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionPaint"
              }
            ]
          },
          "rbumpermetal": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionBody"
              }
            ]
          },
          "rbumperpaint": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionPaint"
              }
            ]
          },
          "taillightsmetal": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionBody"
              }
            ]
          },
          "taillightspaint": {
            "default": "ok",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionPaint"
              }
            ]
          },
          "security": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "moonroof": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "thirdrow": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRacConditionMechanical"
              }
            ]
          },
          "wheel_covers": {
            "default": "",
            "type": "string"
          },
          "rac_acct_change": {
            "type": "string"
          },
          "rac_dept_assgd": {
            "type": "string"
          }
        }
      },
      "ConditionReportRenaissance": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "crdate": {
            "type": "string",
            "format": "date-time"
          },
          "subtype": {
            "default": "Auto",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceVehicleType"
              }
            ]
          },
          "alloy_wheels": {
            "default": "None",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionMechanical"
              }
            ]
          },
          "fourwheel": {
            "default": "None",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionMechanical"
              }
            ]
          },
          "power_seats": {
            "default": "None",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionMechanical"
              }
            ]
          },
          "alarm": {
            "default": "None",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionMechanical"
              }
            ]
          },
          "sun_roof": {
            "default": "None",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionMechanical"
              }
            ]
          },
          "automatic": {
            "default": "None",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionMechanical"
              }
            ]
          },
          "heated_seats": {
            "default": "None",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionMechanical"
              }
            ]
          },
          "spare_tire": {
            "default": "None",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionMechanical"
              }
            ]
          },
          "roof_type": {
            "default": "None",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionMechanical"
              }
            ]
          },
          "radio": {
            "default": "None",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionMechanical"
              }
            ]
          },
          "tilt": {
            "default": "None",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionMechanical"
              }
            ]
          },
          "cruise": {
            "default": "None",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionMechanical"
              }
            ]
          },
          "luggage_rack": {
            "default": "None",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionMechanical"
              }
            ]
          },
          "cassette": {
            "default": "None",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionMechanical"
              }
            ]
          },
          "d_air_bag": {
            "default": "None",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionMechanical"
              }
            ]
          },
          "outside_mirror": {
            "default": "None",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionMechanical"
              }
            ]
          },
          "cd": {
            "default": "None",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionMechanical"
              }
            ]
          },
          "p_air_bag": {
            "default": "None",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionMechanical"
              }
            ]
          },
          "inside_mirror": {
            "default": "None",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionMechanical"
              }
            ]
          },
          "ac": {
            "default": "None",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionMechanical"
              }
            ]
          },
          "power_steering": {
            "default": "None",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionMechanical"
              }
            ]
          },
          "front_wheel_dr": {
            "default": "None",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionMechanical"
              }
            ]
          },
          "power_windows": {
            "default": "None",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionMechanical"
              }
            ]
          },
          "anti_lock": {
            "default": "None",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionMechanical"
              }
            ]
          },
          "grill": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionExterior"
              }
            ]
          },
          "rr_tire": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionGeneric"
              }
            ]
          },
          "lf_tire": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionGeneric"
              }
            ]
          },
          "trunk_rack": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionExterior"
              }
            ]
          },
          "muffler": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionGeneric"
              }
            ]
          },
          "front_bumper": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionExterior"
              }
            ]
          },
          "trunk_lid": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionExterior"
              }
            ]
          },
          "convertible_top": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionExterior"
              }
            ]
          },
          "eng_cond": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionGeneric"
              }
            ]
          },
          "plates": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "hood": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionExterior"
              }
            ]
          },
          "rear_bumper": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionExterior"
              }
            ]
          },
          "hub_caps": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionGeneric"
              }
            ]
          },
          "eng_type": {
            "default": "3 Cyl",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceEngineType"
              }
            ]
          },
          "windsheild": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionGeneric"
              }
            ]
          },
          "trailer_hitch": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionGeneric"
              }
            ]
          },
          "front_seats": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionGeneric"
              }
            ]
          },
          "turbo": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "keys_in": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "rf_fender": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionExterior"
              }
            ]
          },
          "lr_fender": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionExterior"
              }
            ]
          },
          "rear_seats": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionGeneric"
              }
            ]
          },
          "driveable": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "rf_lights": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionGeneric"
              }
            ]
          },
          "lr_lights": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionGeneric"
              }
            ]
          },
          "int_type": {
            "default": "Cloth",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceInteriorType"
              }
            ]
          },
          "brakes": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionGeneric"
              }
            ]
          },
          "bedliner": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionGeneric"
              }
            ]
          },
          "rf_tire": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionGeneric"
              }
            ]
          },
          "lr_tire": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionGeneric"
              }
            ]
          },
          "int_condition": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionGeneric"
              }
            ]
          },
          "glass": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionGeneric"
              }
            ]
          },
          "tailgate": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionExterior"
              }
            ]
          },
          "rht_dr": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionExterior"
              }
            ]
          },
          "lft_dr": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionExterior"
              }
            ]
          },
          "carpet": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionGeneric"
              }
            ]
          },
          "paint": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionExterior"
              }
            ]
          },
          "cap": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionGeneric"
              }
            ]
          },
          "rr_fender": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionExterior"
              }
            ]
          },
          "lf_fender": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionExterior"
              }
            ]
          },
          "headliner": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionGeneric"
              }
            ]
          },
          "battery": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionGeneric"
              }
            ]
          },
          "rr_lights": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionGeneric"
              }
            ]
          },
          "lf_lights": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionGeneric"
              }
            ]
          },
          "roof_rack": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionExterior"
              }
            ]
          },
          "radiator": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRenaissanceConditionGeneric"
              }
            ]
          },
          "damage_desc": {
            "default": "",
            "type": "string"
          },
          "eng_size": {
            "default": "",
            "type": "string"
          },
          "client_printed": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          }
        }
      },
      "ConditionReportRv": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "crdate": {
            "default": "",
            "type": "string",
            "format": "date-time"
          },
          "leather_seats": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "microwave": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "hitch": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "alloy_wheels": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "stove": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "levelling_jacks": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "refridgerator": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "tv": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "washer_dryer": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "rear_ac": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "awning": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "holding_tanks": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "notes": {
            "default": "",
            "type": "string"
          },
          "details": {
            "default": "",
            "type": "string"
          },
          "completed_by": {
            "default": "",
            "type": "string"
          },
          "general_condition": {
            "default": "Average",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvConditionGeneral"
              }
            ]
          },
          "mechanical_condition": {
            "default": "Average",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvConditionMechanical"
              }
            ]
          },
          "interior_condition": {
            "default": "Average",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvConditionInterior"
              }
            ]
          },
          "ignition_keys": {
            "default": "N/A",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvKeyStatus"
              }
            ]
          },
          "secondary_keys": {
            "default": "N/A",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvKeyStatus"
              }
            ]
          },
          "primary_battery": {
            "default": "Good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvBatteryStatus"
              }
            ]
          },
          "auxillary_battery": {
            "default": "Good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvBatteryStatus"
              }
            ]
          },
          "type_of_vehicle": {
            "default": "Class A Motorhome",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvVehicleType"
              }
            ]
          },
          "generator": {
            "default": "N/A",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvGeneratorStatus"
              }
            ]
          },
          "transmission": {
            "default": "Automatic",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvTransmissionType"
              }
            ]
          },
          "stereo": {
            "default": "NONE",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvStereoType"
              }
            ]
          },
          "body": {
            "default": "Good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvConditionBody"
              }
            ]
          },
          "paint": {
            "default": "Good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvConditionPaint"
              }
            ]
          },
          "able_to_drive": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvDrivableStatus"
              }
            ]
          },
          "driver_front_quarter_panel": {
            "default": "N/A",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvConditionExterior"
              }
            ]
          },
          "driver_front_door": {
            "default": "N/A",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvConditionExterior"
              }
            ]
          },
          "driver_rear_door": {
            "default": "N/A",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvConditionExterior"
              }
            ]
          },
          "driver_rear_quarter_panel": {
            "default": "N/A",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvConditionExterior"
              }
            ]
          },
          "galley": {
            "default": "N/A",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvConditionInteriorRoom"
              }
            ]
          },
          "passenger_front_quarter_panel": {
            "default": "N/A",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvConditionExterior"
              }
            ]
          },
          "passenger_front_door": {
            "default": "N/A",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvConditionExterior"
              }
            ]
          },
          "passenger_rear_door": {
            "default": "N/A",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvConditionExterior"
              }
            ]
          },
          "passenger_rear_quarter_panel": {
            "default": "N/A",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvConditionExterior"
              }
            ]
          },
          "bathroom": {
            "default": "N/A",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvConditionInteriorRoom"
              }
            ]
          },
          "hood": {
            "default": "N/A",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvConditionExterior"
              }
            ]
          },
          "roof": {
            "default": "N/A",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvConditionRoof"
              }
            ]
          },
          "frame": {
            "default": "N/A",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvConditionExterior"
              }
            ]
          },
          "storage": {
            "default": "N/A",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvConditionExterior"
              }
            ]
          },
          "bumper_front": {
            "default": "Good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvConditionBumper"
              }
            ]
          },
          "bumper_rear": {
            "default": "Good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "glass": {
            "default": "N/A",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvConditionGlass"
              }
            ]
          },
          "glass_details": {
            "default": "",
            "type": "string"
          },
          "tire_lf": {
            "default": "Good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvConditionTire"
              }
            ]
          },
          "tire_lr": {
            "default": "Good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvConditionTire"
              }
            ]
          },
          "tire_rf": {
            "default": "Good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvConditionTire"
              }
            ]
          },
          "tire_rr": {
            "default": "Good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportRvConditionTire"
              }
            ]
          },
          "client_printed": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          }
        }
      },
      "ConditionReportTruck": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "crdate": {
            "default": "",
            "type": "string",
            "format": "date-time"
          },
          "general_condition": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGeneral"
              }
            ]
          },
          "mechanical_condition": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionMechanical"
              }
            ]
          },
          "interior_condition": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionInterior"
              }
            ]
          },
          "ignition_keys": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseKeyStatus"
              }
            ]
          },
          "secondary_keys": {
            "default": "N/A",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseKeySecondaryStatus"
              }
            ]
          },
          "battery": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBatteryStatus"
              }
            ]
          },
          "vehicle_type": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportTruckVehicleType"
              }
            ]
          },
          "roof": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseRoofType"
              }
            ]
          },
          "transmission": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseTransmissionType"
              }
            ]
          },
          "stereo": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseStereoType"
              }
            ]
          },
          "power_windows": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "power_seats": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "leather_seats": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "power_locks": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "power_steering": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "alloy_wheels": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "tilt_wheel": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "cruise_control": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "camper_shell": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "ac": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "diesel": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "rear_ac": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "body": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBodyOverall"
              }
            ]
          },
          "paint": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionPaint"
              }
            ]
          },
          "able_to_drive": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseDrivableStatus"
              }
            ]
          },
          "driver_front_quarter_panel": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "driver_front_door": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "driver_rear_door": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "driver_rear_quarter_panel": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "driver_pu_bed": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "passenger_front_quarter_panel": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "passenger_front_door": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "passenger_rear_door": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "passenger_rear_quarter_panel": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "passenger_pu_bed": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "hood": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "roof_detail": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "trunk": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "tailgate_hatchback": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBody"
              }
            ]
          },
          "bumper_front": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBumper"
              }
            ]
          },
          "bumper_rear": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionBumper"
              }
            ]
          },
          "glass": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionGlass"
              }
            ]
          },
          "tire_lf": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionTire"
              }
            ]
          },
          "tire_lr": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionTire"
              }
            ]
          },
          "tire_rf": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionTire"
              }
            ]
          },
          "tire_rr": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionTire"
              }
            ]
          },
          "tire_spare": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionTireSpare"
              }
            ]
          },
          "wheel_cover_count": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseWheelCoverCount"
              }
            ]
          },
          "notes": {
            "default": "",
            "type": "string"
          },
          "details": {
            "default": "",
            "type": "string"
          },
          "glass_details": {
            "default": "",
            "type": "string"
          },
          "completed_by": {
            "default": "",
            "type": "string"
          },
          "client_printed": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          }
        }
      },
      "ConditionReportWatercraft": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "crdate": {
            "default": "",
            "type": "string",
            "format": "date-time"
          },
          "general_condition": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionGeneral"
              }
            ]
          },
          "mechanical_condition": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionMechanical"
              }
            ]
          },
          "interior_condition": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionInterior"
              }
            ]
          },
          "ignition_keys": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseKeyStatus"
              }
            ]
          },
          "secondary_keys": {
            "default": "N/A",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseKeySecondaryStatus"
              }
            ]
          },
          "battery": {
            "default": "good",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBatteryStatus"
              }
            ]
          },
          "craft_type": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftCraftType"
              }
            ]
          },
          "hull": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftHullType"
              }
            ]
          },
          "trailer": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftTrailerType"
              }
            ]
          },
          "stereo": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftStereoType"
              }
            ]
          },
          "inboard_motor": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "propeller": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "fire_extinguisher": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "outboard_motor": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "gallery": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "carpet_floor": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "inboard_outboard": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "head": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "canvas_top": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "fish_finder": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "trolling_motor": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "boat_cover": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "body": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionBody"
              }
            ]
          },
          "paint": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionPaint"
              }
            ]
          },
          "sea_worthy": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGenericNullable"
              }
            ]
          },
          "left_front": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionGeneric"
              }
            ]
          },
          "left_middle": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionGeneric"
              }
            ]
          },
          "left_rear": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionGeneric"
              }
            ]
          },
          "left_back": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionGeneric"
              }
            ]
          },
          "l_live_well": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionGeneric"
              }
            ]
          },
          "right_front": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionGeneric"
              }
            ]
          },
          "right_middle": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionGeneric"
              }
            ]
          },
          "right_rear": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionGeneric"
              }
            ]
          },
          "right_back": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionGeneric"
              }
            ]
          },
          "r_live_well": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionGeneric"
              }
            ]
          },
          "trailer_tongue": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionTrailerTongue"
              }
            ]
          },
          "trailer_lights": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionTrailer"
              }
            ]
          },
          "trailer_right": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionTrailer"
              }
            ]
          },
          "trailer_left": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionTrailer"
              }
            ]
          },
          "trailer_pad_left": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionTrailerPad"
              }
            ]
          },
          "trailer_pad_right": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionTrailerPad"
              }
            ]
          },
          "glass": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionGlass"
              }
            ]
          },
          "tires_l_front": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionTire"
              }
            ]
          },
          "tires_l_rear": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionTireNullable"
              }
            ]
          },
          "tires_r_front": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionTire"
              }
            ]
          },
          "tires_r_rear": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionTireNullable"
              }
            ]
          },
          "tires_spare": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftConditionTireNullable"
              }
            ]
          },
          "notes": {
            "default": "",
            "type": "string"
          },
          "details": {
            "default": "",
            "type": "string"
          },
          "glass_details": {
            "default": "",
            "type": "string"
          },
          "completed_by": {
            "default": "",
            "type": "string"
          },
          "client_printed": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          }
        }
      },
      "ConditionReportHarley": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "crdate": {
            "default": "",
            "type": "string",
            "format": "date-time"
          },
          "fairing": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionHarley"
              }
            ]
          },
          "rear_fender": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionHarley"
              }
            ]
          },
          "seat": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionHarley"
              }
            ]
          },
          "tail_light": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionHarley"
              }
            ]
          },
          "saddlebags": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionHarley"
              }
            ]
          },
          "engine": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBatteryStatus"
              }
            ]
          },
          "kickstand": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionHarley"
              }
            ]
          },
          "exhaust": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionHarley"
              }
            ]
          },
          "handlebars": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionHarley"
              }
            ]
          },
          "paint": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportWatercraftStereoType"
              }
            ]
          },
          "windshield": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "tank": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionHarley"
              }
            ]
          },
          "front_fender": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionHarley"
              }
            ]
          },
          "front_wheel": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "headlight": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionHarley"
              }
            ]
          },
          "rear_wheel": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "battery": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "tour_pack": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionHarley"
              }
            ]
          },
          "radio": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionHarley"
              }
            ]
          },
          "fork_lock": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionHarley"
              }
            ]
          },
          "foot_rests": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionHarley"
              }
            ]
          },
          "mirrors": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionHarley"
              }
            ]
          },
          "keys_fobs": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionHarley"
              }
            ]
          },
          "chrome": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseConditionHarley"
              }
            ]
          },
          "remarks": {
            "default": "",
            "type": "string"
          },
          "transport_comments": {
            "default": "",
            "type": "string"
          },
          "completed_by": {
            "default": "",
            "type": "string"
          },
          "client_printed": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseMotorcycleType"
              }
            ]
          },
          "engine_starts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          }
        }
      },
      "ConditionReportCapitalOne": {
        "type": "object",
        "properties": {
          "dbid": {
            "default": "",
            "type": "integer"
          },
          "comments": {
            "default": "",
            "type": "string"
          },
          "front_bumpermetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "grillemetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "headlightsmetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionHeadlights"
              }
            ]
          },
          "splashmetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionSplash"
              }
            ]
          },
          "hoodmetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "topmetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "dr_f_fendermetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "dr_f_doormetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "lf_quartermetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "dr_r_doormetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "dr_r_fendermetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "ps_r_fendermetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "rr_quartermetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "ps_r_doormetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "ps_f_doormetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "rf_quartermetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "ps_f_fendermetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "rbumpermetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "trunkmetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "tailgatemetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "taillightsmetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "doorhandlesmetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "afterfoglightsmetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "windshieldglass": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionGlass"
              }
            ]
          },
          "rearviewglass": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionGlass"
              }
            ]
          },
          "l_frontglass": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionGlass"
              }
            ]
          },
          "l_rearglass": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionGlass"
              }
            ]
          },
          "rear_windshieldglass": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionGlass"
              }
            ]
          },
          "r_rearglass": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionGlass"
              }
            ]
          },
          "r_frontglass": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionGlass"
              }
            ]
          },
          "l_fronttires": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionTires"
              }
            ]
          },
          "l_reartires": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionTires"
              }
            ]
          },
          "sparetires": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionTires"
              }
            ]
          },
          "r_reartires": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionTires"
              }
            ]
          },
          "r_fronttires": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionTires"
              }
            ]
          },
          "standardwheel": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "alloyedwheel": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "chromewheel": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "aftermarketwheel": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "dashinterior": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionInterior"
              }
            ]
          },
          "f_seatsinterior": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionInterior"
              }
            ]
          },
          "er_seatsinterior": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionInterior"
              }
            ]
          },
          "d_panelsinterior": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionInterior"
              }
            ]
          },
          "carpetinterior": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionInterior"
              }
            ]
          },
          "headlinerinterior": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionInterior"
              }
            ]
          },
          "fabricinterior": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionInterior"
              }
            ]
          },
          "vinylinterior": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionInterior"
              }
            ]
          },
          "leatherinterior": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionInterior"
              }
            ]
          },
          "clothinterior": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionInterior"
              }
            ]
          },
          "ac": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "rearac": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "cruise": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "rdefrost": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "powersteering": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "powerlocks": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "powerwindows": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "powerseats": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "powermirrors": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "tiltsteering": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "enginemechanical": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionEngine"
              }
            ]
          },
          "transmissionmechanical": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionTransmission"
              }
            ]
          },
          "clutchmechanical": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionClutch"
              }
            ]
          },
          "brakesmechanical": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionBrakes"
              }
            ]
          },
          "shiftermechanical": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionMisc"
              }
            ]
          },
          "ignitionlockmechanical": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionMisc"
              }
            ]
          },
          "autotrans": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "mantrans": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "battery": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionBattery"
              }
            ]
          },
          "fwddt": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "rwddt": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "fourwdt": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "nadt": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "engine_4cyl": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "engine_6cyl": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "engine_8cyl": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "engine_diesel": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "engine_oth": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "roof_hardtop": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "roof_sunroof": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "roof_ttop": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "ent_amfmcd": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "ent_amfmcassette": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "ent_cd": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "ent_aftermarket": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "ent_dvd": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "ent_amp": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "ent_subs": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "ent_basebox": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "ent_headresttv": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "other_tow": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "other_nav": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "other_roofrack": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "other_runningboards": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "other_emergency_tools": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "other_jack": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "key_specialty": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "key_transponder": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "key_regular": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "key_none": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "paint_chipped": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "paint_mismatched": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "paint_scratched": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "paint_oxidized": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "paint_nonorig": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "paint_bondo": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "rac_acct_change": {
            "default": "",
            "type": "string"
          },
          "rac_dept_assgd": {
            "default": "",
            "type": "string"
          },
          "final_method": {
            "default": "",
            "type": "string"
          },
          "closed_date": {
            "default": "",
            "type": "string",
            "format": "date-time"
          },
          "payoff_amt": {
            "default": "",
            "type": "string"
          },
          "client_printed": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "general_condition": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionGeneral"
              }
            ]
          }
        }
      },
      "ConditionReportAlly": {
        "type": "object",
        "properties": {
          "dbid": {
            "default": "",
            "type": "integer"
          },
          "comments": {
            "default": "",
            "type": "string"
          },
          "front_bumpermetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "grillemetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "headlightsmetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionHeadlights"
              }
            ]
          },
          "splashmetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionSplash"
              }
            ]
          },
          "hoodmetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "topmetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "dr_f_fendermetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "dr_f_doormetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "lf_quartermetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "dr_r_doormetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "dr_r_fendermetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "ps_r_fendermetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "rr_quartermetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "ps_r_doormetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "ps_f_doormetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "rf_quartermetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "ps_f_fendermetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "rbumpermetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "trunkmetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "tailgatemetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "taillightsmetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "doorhandlesmetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "afterfoglightsmetal": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionExterior"
              }
            ]
          },
          "windshieldglass": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionGlass"
              }
            ]
          },
          "rearviewglass": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionGlass"
              }
            ]
          },
          "l_frontglass": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionGlass"
              }
            ]
          },
          "l_rearglass": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionGlass"
              }
            ]
          },
          "rear_windshieldglass": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionGlass"
              }
            ]
          },
          "r_rearglass": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionGlass"
              }
            ]
          },
          "r_frontglass": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionGlass"
              }
            ]
          },
          "l_fronttires": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionTires"
              }
            ]
          },
          "l_reartires": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionTires"
              }
            ]
          },
          "sparetires": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionTires"
              }
            ]
          },
          "r_reartires": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionTires"
              }
            ]
          },
          "r_fronttires": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionTires"
              }
            ]
          },
          "standardwheel": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "alloyedwheel": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "chromewheel": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "aftermarketwheel": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "dashinterior": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionInterior"
              }
            ]
          },
          "f_seatsinterior": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionInterior"
              }
            ]
          },
          "er_seatsinterior": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionInterior"
              }
            ]
          },
          "d_panelsinterior": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionInterior"
              }
            ]
          },
          "carpetinterior": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionInterior"
              }
            ]
          },
          "headlinerinterior": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionInterior"
              }
            ]
          },
          "fabricinterior": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionInterior"
              }
            ]
          },
          "vinylinterior": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionInterior"
              }
            ]
          },
          "leatherinterior": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionInterior"
              }
            ]
          },
          "clothinterior": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionInterior"
              }
            ]
          },
          "ac": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "rearac": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "cruise": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "rdefrost": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "powersteering": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "powerlocks": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "powerwindows": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "powerseats": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "powermirrors": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "tiltsteering": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "enginemechanical": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionEngine"
              }
            ]
          },
          "transmissionmechanical": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionTransmission"
              }
            ]
          },
          "clutchmechanical": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionClutch"
              }
            ]
          },
          "brakesmechanical": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionBrakes"
              }
            ]
          },
          "shiftermechanical": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionMisc"
              }
            ]
          },
          "ignitionlockmechanical": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionMisc"
              }
            ]
          },
          "autotrans": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "mantrans": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "battery": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionBattery"
              }
            ]
          },
          "fwddt": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "rwddt": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "fourwdt": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "nadt": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "engine_4cyl": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "engine_6cyl": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "engine_8cyl": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "engine_diesel": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "engine_oth": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "roof_hardtop": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "roof_sunroof": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "roof_ttop": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "ent_amfmcd": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "ent_amfmcassette": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "ent_cd": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "ent_aftermarket": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "ent_dvd": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "ent_amp": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "ent_subs": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "ent_basebox": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "ent_headresttv": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "other_tow": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "other_nav": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "other_roofrack": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "other_runningboards": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "other_emergency_tools": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "other_jack": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "key_specialty": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "key_transponder": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "key_regular": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "key_none": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "paint_chipped": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "paint_mismatched": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "paint_scratched": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "paint_oxidized": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "paint_nonorig": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "paint_bondo": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "rac_acct_change": {
            "default": "",
            "type": "string"
          },
          "rac_dept_assgd": {
            "default": "",
            "type": "string"
          },
          "final_method": {
            "default": "",
            "type": "string"
          },
          "closed_date": {
            "default": "",
            "type": "string",
            "format": "date-time"
          },
          "payoff_amt": {
            "default": "",
            "type": "string"
          },
          "client_printed": {
            "default": "Yes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "general_condition": {
            "default": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportCapitalOneConditionGeneral"
              }
            ]
          },
          "biohazard": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "flood_damage": {
            "default": "No",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanGeneric"
              }
            ]
          },
          "abs_light": {
            "default": "Off",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanUnknown"
              }
            ]
          },
          "brake_light": {
            "default": "Off",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanUnknown"
              }
            ]
          },
          "airbag_light": {
            "default": "Off",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionReportBaseBooleanUnknown"
              }
            ]
          }
        }
      },
      "ConditionReportBaseBooleanGeneric": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Yes",
            "enum": [
              "Yes",
              "No"
            ]
          }
        }
      },
      "ConditionReportBaseConditionGenericNullable": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "good",
            "enum": [
              "",
              "good",
              "fair",
              "poor",
              "none"
            ]
          }
        }
      },
      "ConditionReportCacVehicleType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Car",
            "enum": [
              "Car",
              "Truck"
            ]
          }
        }
      },
      "ConditionReportCacConditionBody": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "scratched",
            "enum": [
              "scratched",
              "dented",
              "severe",
              "none",
              "sd",
              "default"
            ]
          }
        }
      },
      "ConditionReportBaseConditionGeneral": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "good",
            "enum": [
              "",
              "good",
              "average",
              "clean",
              "rough",
              "collision damage",
              "totaled",
              "junk"
            ]
          }
        }
      },
      "ConditionReportCacConditionTires": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "good",
            "enum": [
              "good",
              "poor",
              "flat",
              "missing",
              "default"
            ]
          }
        }
      },
      "ConditionReportCacConditionGlass": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "good",
            "enum": [
              "good",
              "chipped",
              "cracked",
              "scratched",
              "missing",
              "default"
            ]
          }
        }
      },
      "ConditionReportCacConditionEngine": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "runs",
            "enum": [
              "runs",
              "no run",
              "improper",
              "unknown",
              "no start",
              "default"
            ]
          }
        }
      },
      "ConditionReportCacConditionGeneric": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "good",
            "enum": [
              "good",
              "fair",
              "poor",
              "default"
            ]
          }
        }
      },
      "ConditionReportBaseConditionMechanical": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "good",
            "enum": [
              "",
              "good",
              "average",
              "poor",
              "default",
              "engine noise",
              "not running",
              "totaled",
              "unknown"
            ]
          }
        }
      },
      "ConditionReportBaseConditionInterior": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "good",
            "enum": [
              "",
              "good",
              "average",
              "clean",
              "dirty",
              "very dirty",
              "smells",
              "totaled",
              "rough"
            ]
          }
        }
      },
      "ConditionReportBaseWheelCoverCount": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "4",
            "enum": [
              "",
              "4",
              "3",
              "2",
              "1",
              "N/A"
            ]
          }
        }
      },
      "ConditionReportBaseConditionTireSpare": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "",
              "Good",
              "Average",
              "Poor",
              "Bald",
              "Flat",
              "100",
              "75",
              "50",
              "25",
              "Mini Spare",
              "none"
            ]
          }
        }
      },
      "ConditionReportBaseConditionTire": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "",
              "Good",
              "Average",
              "Poor",
              "Bald",
              "Flat",
              "100",
              "75",
              "50",
              "25",
              "Mini Spare",
              "none"
            ]
          }
        }
      },
      "ConditionReportBaseConditionGlass": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "",
              "Good",
              "Scratched",
              "Front Chipped",
              "Front Cracked",
              "Rear Chipped",
              "Rear Cracked",
              "Broken",
              "Shattered",
              "NONE"
            ]
          }
        }
      },
      "ConditionReportBaseConditionBumper": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "",
              "Good",
              "Average",
              "Scratch",
              "Ding",
              "Scratched and Dinged",
              "Small Dent",
              "Large Dent",
              "Collision Damage",
              "Rock Chipped",
              "Cracked",
              "Totaled",
              "None"
            ]
          }
        }
      },
      "ConditionReportBaseConditionBody": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "",
              "Average",
              "Good",
              "Scratch",
              "Ding",
              "Scratched and Dinged",
              "Small Dent",
              "Large Dent",
              "Collision Damage",
              "Rock Chipped",
              "Totaled",
              "N/A",
              "None"
            ]
          }
        }
      },
      "ConditionReportBaseKeyStatus": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Yes",
            "enum": [
              "",
              "Yes",
              "No",
              "damaged"
            ]
          }
        }
      },
      "ConditionReportBaseKeySecondaryStatus": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Yes",
            "enum": [
              "",
              "Yes",
              "No",
              "damaged",
              "N/A"
            ]
          }
        }
      },
      "ConditionReportBaseBatteryStatus": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "good",
            "enum": [
              "",
              "good",
              "dead",
              "none",
              "N/A"
            ]
          }
        }
      },
      "ConditionReportCarVehicleType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "nullable": true,
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "2DR Car",
            "enum": [
              null,
              "2DR Car",
              "3DR Car",
              "4DR Car",
              "Station Wagon",
              "Mini Van",
              "AWD 2DR Car",
              "AWD 3DR Car",
              "AWD 4DR Car",
              "AWD Station Wagon",
              "AWD Mini Van",
              "Full Size Van",
              "Conversion Van",
              "SUV 2 Door 2WD",
              "SUV 2 Door 4X4",
              "SUV 2 Door AWD",
              "SUV 4 Door 2WD",
              "SUV 4 Door 4X4",
              "SUV 4 Door AWD"
            ]
          }
        }
      },
      "ConditionReportBaseRoofType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "nullable": true,
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Vinyl",
            "enum": [
              null,
              "Standard Roof",
              "Vinyl",
              "T-Tops",
              "Moon-Roof",
              "Sun-Roof",
              "Totaled",
              "Convertible"
            ]
          }
        }
      },
      "ConditionReportBaseTransmissionType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "nullable": true,
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Automatic",
            "enum": [
              null,
              "Automatic",
              "Manual",
              "Manual-Unknown",
              "Auto-Unknown"
            ]
          }
        }
      },
      "ConditionReportBaseStereoType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "AM/FM",
            "enum": [
              "",
              "NONE",
              "NO RADIO HOLE IN DASH",
              "FACE PLATE MISSING",
              "AM/FM",
              "AM/FM/Tape",
              "AM/FM/CD",
              "AM/FM/CD/Tape",
              "Tape/CD",
              "Tape/Changer",
              "AM/FM/Changer",
              "AM/FM/Tape/Changer",
              "AM/FM/CD/Tape W/Changer",
              "AM/FM/CD/W-Changer"
            ]
          }
        }
      },
      "ConditionReportBaseConditionBodyOverall": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "",
              "Good",
              "Average",
              "Rusted",
              "Dented",
              "Poor",
              "Totaled"
            ]
          }
        }
      },
      "ConditionReportBaseConditionPaint": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "",
              "Good",
              "Average",
              "Faded",
              "Scratched",
              "Custom",
              "Totaled"
            ]
          }
        }
      },
      "ConditionReportBaseDrivableStatus": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Yes",
            "enum": [
              "",
              "Yes",
              "No",
              "No Keys"
            ]
          }
        }
      },
      "ConditionReportCompanyStereoType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "AM/FM",
            "enum": [
              "NONE",
              "AM/FM",
              "CD",
              "Aftermarket"
            ]
          }
        }
      },
      "ConditionReportCompanyInteriorType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Vinyl",
            "enum": [
              "Vinyl",
              "Cloth",
              "Leather"
            ]
          }
        }
      },
      "ConditionReportCompanyConditionInterior": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "good",
            "enum": [
              "",
              "good",
              "worn",
              "burned",
              "stained"
            ]
          }
        }
      },
      "ConditionReportCompanyConditionMechanical": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "good",
            "enum": [
              "good",
              "rough",
              "inoperable"
            ]
          }
        }
      },
      "ConditionReportCompanyConditionGeneral": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "ok",
            "enum": [
              "ok",
              "scrt",
              "ding",
              "dent",
              "dmg"
            ]
          }
        }
      },
      "ConditionReportCompanyConditionPaint": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Ok",
            "enum": [
              "Ok",
              "Chipped",
              "Mis-matched",
              "Keyed",
              "Oxidized",
              "Not Original Color",
              "Bondo Showing"
            ]
          }
        }
      },
      "ConditionReportCompanyConditionGlass": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "Ok",
              "Chipped",
              "Cracked",
              "Broken"
            ]
          }
        }
      },
      "ConditionReportCompanyConditionTire": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "Good",
              "Poor",
              "Flat",
              "Missing"
            ]
          }
        }
      },
      "ConditionReportBaseDamage": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Yes",
            "enum": [
              "Yes",
              "No",
              "> 1000"
            ]
          }
        }
      },
      "ConditionReportCompanyConditionOverall": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Clean",
            "enum": [
              "Clean",
              "Average",
              "Rough",
              "Salvage"
            ]
          }
        }
      },
      "ConditionReportBaseSunroofType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Manual",
            "enum": [
              "Manual",
              "Power",
              "T-Top"
            ]
          }
        }
      },
      "ConditionReportBaseDrivetrainType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "N/A",
            "enum": [
              "N/A",
              "AWD",
              "4x4"
            ]
          }
        }
      },
      "ConditionReportBaseWheelType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Alloy",
            "enum": [
              "Alloy",
              "Chrome",
              "Aftermarket"
            ]
          }
        }
      },
      "ConditionReportCompanyTransmissionType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Automatic",
            "enum": [
              "Automatic",
              "Manual"
            ]
          }
        }
      },
      "ConditionReportCompanyBodyType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "2-door",
            "enum": [
              "2-door",
              "4-door"
            ]
          }
        }
      },
      "ConditionReportCompanyEngineType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "4cyl",
            "enum": [
              "4cyl",
              "6cyl",
              "8cyl",
              "Diesel",
              "Other"
            ]
          }
        }
      },
      "ConditionReportMotoatvConditionTire": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "",
              "Good",
              "Average",
              "Bald",
              "Flat",
              "None"
            ]
          }
        }
      },
      "ConditionReportMotoatvConditionGlass": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "",
              "N/A",
              "Good",
              "Scratched",
              "Broken",
              "Shattered",
              "NONE"
            ]
          }
        }
      },
      "ConditionReportMotoatvConditionBumper": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Scratch",
            "enum": [
              "",
              "N/A",
              "Scratch",
              "Ding",
              "Small Dent",
              "Large Dent",
              "Totaled"
            ]
          }
        }
      },
      "ConditionReportMotoatvChrome": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Yes",
            "enum": [
              "",
              "N/A",
              "Yes",
              "No"
            ]
          }
        }
      },
      "ConditionReportMotoatvConditionElectonics": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Working",
            "enum": [
              "",
              "Working",
              "Non Op",
              "Damaged",
              "Missing",
              "N/A"
            ]
          }
        }
      },
      "ConditionReportMotoatvConditionFrame": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "",
              "Good",
              "Average",
              "Scratch",
              "Ding",
              "Small Dent",
              "Large Dent",
              "Totaled",
              "N/A"
            ]
          }
        }
      },
      "ConditionReportMotoatvConditionBody": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "",
              "Good",
              "Average",
              "Scratch",
              "Ding",
              "Small Dent",
              "Large Dent",
              "Totaled",
              "Cracked",
              "N/A"
            ]
          }
        }
      },
      "ConditionReportMotoatvConditionFender": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "",
              "Good",
              "Bent",
              "N/A"
            ]
          }
        }
      },
      "ConditionReportBaseBooleanGenericNullable": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Yes",
            "enum": [
              "",
              "Yes",
              "No"
            ]
          }
        }
      },
      "ConditionReportMotoatvConditionPaint": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "",
              "Good",
              "Average",
              "Faded",
              "Custom"
            ]
          }
        }
      },
      "ConditionReportMotoatvConditionBodyOverall": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "",
              "Good",
              "Average",
              "Rusted",
              "Dented",
              "Poor"
            ]
          }
        }
      },
      "ConditionReportMotoatvStereoType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "AM/FM",
            "enum": [
              "",
              "NONE",
              "AM/FM",
              "AM/FM/Tape",
              "AM/FM/CD",
              "Tape/CD",
              "Tape/Changer",
              "AM/FM/Changer",
              "AM/FM/Tape/Changer",
              "AM/FM/CD/W-Changer"
            ]
          }
        }
      },
      "ConditionReportMotoatvDrivetrainType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Manual",
            "enum": [
              "",
              "Manual",
              "Chain",
              "D/Shaft",
              "Belt",
              "Automatic"
            ]
          }
        }
      },
      "ConditionReportMotoatvConditionSeats": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "",
              "N/A",
              "Good",
              "Average",
              "Poor"
            ]
          }
        }
      },
      "ConditionReportMotoatvVehicleType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Motorcycle",
            "enum": [
              "",
              "Motorcycle",
              "Off Rd. M/C",
              "3 Wheel ATV",
              "4 Wheel ATV",
              "M/C w/Sidecar"
            ]
          }
        }
      },
      "ConditionReportNuvellBodyType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "4-door",
            "enum": [
              "2-door",
              "4-door"
            ]
          }
        }
      },
      "ConditionReportNuvellConditionInterior": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "good",
            "enum": [
              "good",
              "worn",
              "burned",
              "stained"
            ]
          }
        }
      },
      "ConditionReportNuvellConditionMechanical": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "good",
            "enum": [
              "good",
              "rough",
              "inoperable"
            ]
          }
        }
      },
      "ConditionReportNuvellConditionGeneral": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "ok",
            "enum": [
              "ok",
              "scrt",
              "ding",
              "dent",
              "dmg"
            ]
          }
        }
      },
      "ConditionReportNuvellConditionPaint": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Ok",
            "enum": [
              "Ok",
              "Chipped",
              "Mis-matched",
              "Keyed",
              "Oxidized",
              "Not Original Color",
              "Bondo Showing"
            ]
          }
        }
      },
      "ConditionReportNuvellConditionGlass": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Ok",
            "enum": [
              "Ok",
              "Chipped",
              "Cracked",
              "Broken"
            ]
          }
        }
      },
      "ConditionReportNuvellConditionTire": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "Good",
              "Poor",
              "Flat",
              "Missing"
            ]
          }
        }
      },
      "ConditionReportNuvellConditionOverall": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Clean",
            "enum": [
              "Clean",
              "Average",
              "Rough",
              "Salvage"
            ]
          }
        }
      },
      "ConditionReportNuvellInteriorType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Vinyl",
            "enum": [
              "Vinyl",
              "Cloth",
              "Leather"
            ]
          }
        }
      },
      "ConditionReportNuvellStereoType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "None",
            "enum": [
              "None",
              "AM/FM",
              "Cassette",
              "CD",
              "Aftermarket"
            ]
          }
        }
      },
      "ConditionReportNuvellTransmissionType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Automatic",
            "enum": [
              "Automatic",
              "Manual"
            ]
          }
        }
      },
      "ConditionReportNuvellEngineType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "4cyl",
            "enum": [
              "4cyl",
              "6cyl",
              "8cyl",
              "Diesel",
              "Other"
            ]
          }
        }
      },
      "ConditionReportOnyxPickupType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Towed",
            "enum": [
              "Towed",
              "Driven",
              "Flatbed"
            ]
          }
        }
      },
      "ConditionReportOnyxVehicleType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "DE",
            "enum": [
              "DE",
              "DX",
              "LE",
              "XLE",
              "SE",
              "2Dr",
              "4Dr"
            ]
          }
        }
      },
      "ConditionReportOnyxConditionGeneral": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "Good",
              "Avg",
              "Poor"
            ]
          }
        }
      },
      "ConditionReportOnyxEngineType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "4cyl",
            "enum": [
              "4cyl",
              "6cyl",
              "8cyl"
            ]
          }
        }
      },
      "ConditionReportParConditionBody": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "ok",
            "enum": [
              "",
              "ok",
              "scratch",
              "ding",
              "dent",
              "damage",
              "missing",
              "broken"
            ]
          }
        }
      },
      "ConditionReportParConditionOverall": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "excellent",
            "enum": [
              "",
              "excellent",
              "good",
              "average",
              "poor",
              "junk"
            ]
          }
        }
      },
      "ConditionReportParKeyType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "nokeys",
            "enum": [
              "",
              "nokeys",
              "vat",
              "10cut",
              "sglecut",
              "splcut",
              "laser"
            ]
          }
        }
      },
      "ConditionReportParConditionInterior": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "good",
            "enum": [
              "",
              "good",
              "worn",
              "burned",
              "stained"
            ]
          }
        }
      },
      "ConditionReportParConditionGlass": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "ok",
            "enum": [
              "",
              "ok",
              "crack",
              "chip"
            ]
          }
        }
      },
      "ConditionReportParWheelType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "standard",
            "enum": [
              "",
              "standard",
              "alloyed",
              "chrome",
              "aftermarket"
            ]
          }
        }
      },
      "ConditionReportParConditionTire": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "good",
            "enum": [
              "",
              "good",
              "fair",
              "poor",
              "missing"
            ]
          }
        }
      },
      "ConditionReportParConditionMechanical": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "ok",
            "enum": [
              "",
              "ok",
              "rough",
              "inop"
            ]
          }
        }
      },
      "ConditionReportParRoofType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "ok",
            "enum": [
              "",
              "hardtop",
              "sunroof-manual",
              "sunroof-power",
              "sunroof-ttop",
              "moonroof"
            ]
          }
        }
      },
      "ConditionReportParBodyType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "2door",
            "enum": [
              "",
              "2door",
              "4door"
            ]
          }
        }
      },
      "ConditionReportParOdometerType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "digital",
            "enum": [
              "",
              "digital",
              "analog",
              "5digit",
              "na"
            ]
          }
        }
      },
      "ConditionReportParEngineType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "4cyl",
            "enum": [
              "",
              "4cyl",
              "6cyl",
              "8cyl",
              "diesel",
              "other"
            ]
          }
        }
      },
      "ConditionReportParTransmissionType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "automatic",
            "enum": [
              "",
              "automatic",
              "manual"
            ]
          }
        }
      },
      "ConditionReportParDrivetrainType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "2wd",
            "enum": [
              "",
              "2wd",
              "4wd",
              "4x4",
              "awd",
              "na"
            ]
          }
        }
      },
      "ConditionReportRacBooleanGeneric": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "yes",
            "enum": [
              "yes",
              "no"
            ]
          }
        }
      },
      "ConditionReportRacConditionMechanical": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "good",
            "enum": [
              "good",
              "fair",
              "poor",
              "none"
            ]
          }
        }
      },
      "ConditionReportRacConditionPaint": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "ok",
            "enum": [
              "ok",
              "fade",
              "chip",
              "scratch"
            ]
          }
        }
      },
      "ConditionReportRacConditionBody": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "ok",
            "enum": [
              "ok",
              "lg dent",
              "sm dent",
              "rust"
            ]
          }
        }
      },
      "ConditionReportRenaissanceConditionGeneric": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Yes",
            "enum": [
              "Yes",
              "No",
              "Poor",
              "Fair",
              "Good"
            ]
          }
        }
      },
      "ConditionReportRenaissanceConditionExterior": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Yes",
            "enum": [
              "Yes",
              "No",
              "Dmg-S",
              "Dmg-D",
              "Dmg-S/D",
              "Poor",
              "Fair",
              "Good"
            ]
          }
        }
      },
      "ConditionReportRenaissanceInteriorType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Vinyl",
            "enum": [
              "Cloth",
              "Leather",
              "Vinyl"
            ]
          }
        }
      },
      "ConditionReportRenaissanceEngineType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "3 Cyl",
            "enum": [
              "3 Cyl",
              "4 Cyl",
              "5 Cyl",
              "6 Cyl",
              "8 Cyl",
              "10 Cyl",
              "12 Cyl"
            ]
          }
        }
      },
      "ConditionReportRenaissanceConditionMechanical": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Yes",
            "enum": [
              "None",
              "Yes",
              "No",
              "Good",
              "Fair",
              "Poor",
              "Damaged",
              "Missing"
            ]
          }
        }
      },
      "ConditionReportRenaissanceVehicleType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Auto",
            "enum": [
              "Auto",
              "Truck",
              "SUV"
            ]
          }
        }
      },
      "ConditionReportRvConditionGeneral": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Average",
            "enum": [
              "Average",
              "Clean",
              "Rough",
              "Junk",
              "Good",
              "Poor"
            ]
          }
        }
      },
      "ConditionReportRvConditionTire": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Average",
            "enum": [
              "Good",
              "Average",
              "Bald",
              "Flat",
              "None"
            ]
          }
        }
      },
      "ConditionReportRvConditionGlass": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "N/A",
              "Good",
              "Scratched",
              "Broken",
              "Shattered",
              "NONE"
            ]
          }
        }
      },
      "ConditionReportRvConditionBumper": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "Good",
              "Average",
              "Poor",
              "Missing",
              "Scratch",
              "Ding",
              "Small Dent",
              "Large Dent",
              "Totaled"
            ]
          }
        }
      },
      "ConditionReportRvConditionExterior": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "N/A",
              "Good",
              "Average",
              "Scratch",
              "Ding",
              "Small Dent",
              "Large Dent",
              "Totaled"
            ]
          }
        }
      },
      "ConditionReportRvConditionRoof": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "N/A",
              "Average",
              "Good",
              "Scratch",
              "Ding",
              "Small Dent",
              "Large Dent",
              "Water Damage",
              "Totaled"
            ]
          }
        }
      },
      "ConditionReportRvConditionInteriorRoom": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Clean",
            "enum": [
              "N/A",
              "Clean",
              "Average",
              "Dirty",
              "Very Dirty"
            ]
          }
        }
      },
      "ConditionReportRvBatteryStatus": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "Good",
              "Dead",
              "None",
              "N/A"
            ]
          }
        }
      },
      "ConditionReportRvDrivableStatus": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Yes",
            "enum": [
              "Yes",
              "No",
              "N/A",
              "Tow Only"
            ]
          }
        }
      },
      "ConditionReportRvConditionPaint": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "Good",
              "Average",
              "Faded",
              "Custom"
            ]
          }
        }
      },
      "ConditionReportRvConditionBody": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "Good",
              "Average",
              "Rusted",
              "Dented",
              "Poor"
            ]
          }
        }
      },
      "ConditionReportRvStereoType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "AM/FM",
            "enum": [
              "NONE",
              "AM/FM",
              "AM/FM/Tape",
              "AM/FM/CD",
              "Tape/CD",
              "Tape/Changer",
              "AM/FM/Changer",
              "AM/FM/Tape/Changer",
              "AM/FM/CD/W-Changer"
            ]
          }
        }
      },
      "ConditionReportRvTransmissionType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Automatic",
            "enum": [
              "Automatic",
              "Manual",
              "N/A"
            ]
          }
        }
      },
      "ConditionReportRvConditionMechanical": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Average",
            "enum": [
              "Average",
              "Good",
              "Poor",
              "Not Running",
              "Unknown",
              "N/A"
            ]
          }
        }
      },
      "ConditionReportRvConditionInterior": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Average",
            "enum": [
              "Average",
              "Clean",
              "Rough",
              "Good",
              "Poor"
            ]
          }
        }
      },
      "ConditionReportRvVehicleType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Class A Motorhome",
            "enum": [
              "Class A Motorhome",
              "Class C Motorhome",
              "Diesel Pusher M/H",
              "Travel Trailer",
              "Travel Trailer W/Slideout",
              "5th Wheel Trailer",
              "5th Wheel W/Slide-out",
              "Pop-Up Trailer",
              "Goose Neck Trailer",
              "Converted Bus"
            ]
          }
        }
      },
      "ConditionReportRvGeneratorStatus": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Yes",
            "enum": [
              "N/A",
              "Yes",
              "Runs",
              "No Run",
              "No"
            ]
          }
        }
      },
      "ConditionReportRvKeyStatus": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Yes",
            "enum": [
              "N/A",
              "Yes",
              "No",
              "Damaged"
            ]
          }
        }
      },
      "ConditionReportCapitalOneConditionTires": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "good",
            "enum": [
              "good",
              "fair",
              "poor",
              "flat",
              "none"
            ]
          }
        }
      },
      "ConditionReportBaseBooleanUnknown": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "On",
            "enum": [
              "On",
              "Off",
              "Unknown"
            ]
          }
        }
      },
      "ConditionReportCapitalOneConditionGeneral": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "good",
            "enum": [
              "good",
              "average",
              "poor"
            ]
          }
        }
      },
      "ConditionReportCapitalOneConditionBattery": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "operational",
            "enum": [
              "operational",
              "dead"
            ]
          }
        }
      },
      "ConditionReportCapitalOneConditionMisc": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "ok",
            "enum": [
              "ok",
              "fair",
              "damage"
            ]
          }
        }
      },
      "ConditionReportCapitalOneConditionBrakes": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "ok",
            "enum": [
              "ok",
              "fair",
              "pullgrab",
              "unknown"
            ]
          }
        }
      },
      "ConditionReportCapitalOneConditionClutch": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "ok",
            "enum": [
              "ok",
              "fair",
              "slips",
              "unknown"
            ]
          }
        }
      },
      "ConditionReportCapitalOneConditionTransmission": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "ok",
            "enum": [
              "ok",
              "slips",
              "leaksoil",
              "unknown"
            ]
          }
        }
      },
      "ConditionReportCapitalOneConditionEngine": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "ok",
            "enum": [
              "ok",
              "rough",
              "burnsoil",
              "unknown"
            ]
          }
        }
      },
      "ConditionReportCapitalOneConditionInterior": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "clean",
            "enum": [
              "clean",
              "dirty",
              "worn",
              "stained"
            ]
          }
        }
      },
      "ConditionReportCapitalOneConditionGlass": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "ok",
            "enum": [
              "ok",
              "chipped",
              "broken",
              "none"
            ]
          }
        }
      },
      "ConditionReportCapitalOneConditionExterior": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "ok",
            "enum": [
              "ok",
              "scratch",
              "ding",
              "dent",
              "damage"
            ]
          }
        }
      },
      "ConditionReportCapitalOneConditionHeadlights": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "ok",
            "enum": [
              "ok",
              "scratch",
              "dent",
              "ding",
              "damage"
            ]
          }
        }
      },
      "ConditionReportCapitalOneConditionSplash": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "ok",
            "enum": [
              "ok",
              "scratch",
              "dent",
              "ding",
              "damage"
            ]
          }
        }
      },
      "ConditionReportBaseMotorcycleType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Touring",
            "enum": [
              "",
              "Touring",
              "Non-Touring"
            ]
          }
        }
      },
      "ConditionReportBaseConditionHarley": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "",
              "Good",
              "Fair",
              "N/A"
            ]
          }
        }
      },
      "ConditionReportWatercraftStereoType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "AM/FM",
            "enum": [
              "",
              "NONE",
              "AM/FM",
              "AM/FM/Tape",
              "AM/FM/CD",
              "Tape/CD",
              "Tape/Changer",
              "AM/FM/Changer",
              "AM/FM/Tape/Changer",
              "AM/FM/CD/W-Changer"
            ]
          }
        }
      },
      "ConditionReportWatercraftConditionTireNullable": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "",
              "Good",
              "Average",
              "Bald",
              "Flat",
              "None",
              "N/A"
            ]
          }
        }
      },
      "ConditionReportWatercraftConditionTire": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "",
              "Good",
              "Average",
              "Bald",
              "Flat",
              "None"
            ]
          }
        }
      },
      "ConditionReportWatercraftConditionGlass": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "",
              "Good",
              "Scratched",
              "Broken",
              "Shattered",
              "NONE"
            ]
          }
        }
      },
      "ConditionReportWatercraftConditionTrailerPad": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "",
              "N/A",
              "Good",
              "Missing",
              "No Material",
              "Totaled"
            ]
          }
        }
      },
      "ConditionReportWatercraftConditionTrailer": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "",
              "Average",
              "Good",
              "Scratch",
              "Ding",
              "Small Dent",
              "Large Dent",
              "Totaled"
            ]
          }
        }
      },
      "ConditionReportWatercraftConditionGeneric": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "",
              "Good",
              "Average",
              "Scratch",
              "Fiberglass Cracked",
              "Ding",
              "Small Dent",
              "Large Dent",
              "Totaled"
            ]
          }
        }
      },
      "ConditionReportWatercraftConditionTrailerTongue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "",
              "Average",
              "Good",
              "Scratch",
              "Rusted",
              "Electric",
              "Cracked Welds",
              "Broken",
              "Small Dent",
              "Large Dent",
              "Totaled",
              "N/A"
            ]
          }
        }
      },
      "ConditionReportWatercraftConditionPaint": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "",
              "Good",
              "Average",
              "Faded",
              "Hull Scratched",
              "Custom",
              "Aluminum-N/A",
              "Wood-N/A"
            ]
          }
        }
      },
      "ConditionReportWatercraftConditionBody": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Good",
            "enum": [
              "",
              "Good",
              "Average",
              "Rusted",
              "Dented",
              "Poor"
            ]
          }
        }
      },
      "ConditionReportWatercraftTrailerType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Painted",
            "enum": [
              "",
              "N/A",
              "Galvanized",
              "Painted",
              "Custom"
            ]
          }
        }
      },
      "ConditionReportWatercraftHullType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "Wood",
            "enum": [
              "",
              "N/A",
              "Fiberglass",
              "Aluminum",
              "Wood"
            ]
          }
        }
      },
      "ConditionReportWatercraftCraftType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "House Boat",
            "enum": [
              "",
              "Stand-Up Jet Ski",
              "1 Seater Jet Ski",
              "2 Seater Jet Ski",
              "3 Seater Jet Ski",
              "Open Bow Boat W/Trailer",
              "Speed Boat W/Trailer",
              "Fishing Boat W/Trailer",
              "Boat W/Out Trailer",
              "House Boat",
              "Pontoon Boat",
              "Closed Bow W/Trailer"
            ]
          }
        }
      },
      "ConditionReportWatercraftConditionInterior": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "good",
            "enum": [
              "good",
              "average",
              "clean",
              "dirty",
              "very dirty",
              "smells",
              "totaled",
              "rough"
            ]
          }
        }
      },
      "ConditionReportWatercraftConditionMechanical": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "good",
            "enum": [
              "good",
              "average",
              "poor",
              "engine noise",
              "not running",
              "totaled",
              "unknown"
            ]
          }
        }
      },
      "ConditionReportWatercraftConditionGeneral": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "good",
            "enum": [
              "good",
              "average",
              "clean",
              "rough",
              "collision damage",
              "totaled",
              "junk"
            ]
          }
        }
      },
      "ConditionReportTruckVehicleType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "good",
            "enum": [
              "",
              "Reg Cab 2WD P/U",
              "Reg Cab 4X4 P/U",
              "Extra Cab 2WD P/U",
              "Extra Cab 4X4 P/U",
              "3 DR Extra Cab 2WD P/U",
              "3 DR Extra Cab 4X4 P/U",
              "4 DR Extra Cab 2WD P/U",
              "4 DR Extra Cab 4X4 P/U",
              "Crew Cab 2WD P/U",
              "Crew Cab 4X4 P/U"
            ]
          }
        }
      },
      "GetConditionReportsAsPdfResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ConditionReportPdfContainer"
          }
        }
      },
      "ConditionReportPdfContainer": {
        "type": "object",
        "properties": {
          "arcadia": {
            "type": "string",
            "example": null
          },
          "cac": {
            "type": "string",
            "example": null
          },
          "car": {
            "type": "string",
            "example": ""
          },
          "company": {
            "type": "string",
            "example": null
          },
          "motoatv": {
            "type": "string",
            "example": null
          },
          "nuvell": {
            "type": "string",
            "example": null
          },
          "onyx": {
            "type": "string",
            "example": null
          },
          "par": {
            "type": "string",
            "example": null
          },
          "rac": {
            "type": "string",
            "example": null
          },
          "renaissance": {
            "type": "string",
            "example": null
          },
          "rv": {
            "type": "string",
            "example": null
          },
          "truck": {
            "type": "string",
            "example": null
          },
          "watercraft": {
            "type": "string",
            "example": null
          },
          "capitalone": {
            "type": "string",
            "example": null
          },
          "harley": {
            "type": "string",
            "example": null
          },
          "rdngo": {
            "type": "string",
            "example": null
          },
          "ally": {
            "type": "string",
            "example": null
          }
        }
      },
      "CaseCollateral": {
        "required": [
          "case_id",
          "collateral"
        ],
        "type": "object",
        "properties": {
          "case_id": {
            "type": "integer",
            "description": "Case number",
            "example": 2149964689
          },
          "collateral": {
            "$ref": "#/components/schemas/Collateral"
          }
        }
      },
      "AddCasePicture": {
        "required": [
          "case",
          "url"
        ],
        "type": "object",
        "properties": {
          "case": {
            "type": "integer",
            "description": "Case number",
            "example": 2149964689
          },
          "url": {
            "$ref": "#/components/schemas/ArrayOfUrl"
          }
        }
      },
      "AddCasePictureData": {
        "required": [
          "case",
          "data",
          "file_descriptions"
        ],
        "type": "object",
        "properties": {
          "case": {
            "type": "integer",
            "description": "Case number",
            "example": 2149964689
          },
          "data": {
            "$ref": "#/components/schemas/ArrayOfString"
          },
          "file_descriptions": {
            "$ref": "#/components/schemas/ArrayOfString"
          }
        }
      },
      "ArrayOfUrl": {
        "description": "Array of urls",
        "type": "object",
        "properties": {
          "item": {
            "type": "array",
            "example": [
              "url1",
              "url2"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AddCaseDocument": {
        "required": [
          "case",
          "url"
        ],
        "type": "object",
        "properties": {
          "case": {
            "type": "integer",
            "description": "Case number",
            "example": 2149964689
          },
          "url": {
            "$ref": "#/components/schemas/ArrayOfUrl"
          },
          "file_description": {
            "type": "object",
            "description": "File names",
            "properties": {
              "item": {
                "type": "array",
                "example": [
                  "file1",
                  "file2"
                ],
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "document_types": {
            "type": "object",
            "description": "Defaults to Document Type 1 if not present",
            "properties": {
              "item": {
                "type": "array",
                "example": [
                  1,
                  2
                ],
                "items": {
                  "description": "This is an enumerated type. One of the values below must be used.{1=>Account Documents;2=>Agent C/R;3=>Auction C/R;4=>Auction Documents;5=>Client Assignment;6=>Impound Receipt;7=>Internal Document;8=>Personal Property;9=>Picture;10=>Redemption Release;11=>Repo Report;12=>Hold Harmless;13=>Copy of Title;14=>Copy of Contract;15=>Invoice;16=>Bankruptcy Notice;17=>Deceased Notice;18=>SCRA;36=>Lien Lost Notice;37=>Error Notice;38=>Signed Redemption Release;39=>Account Info Notice;40=>IL Recovery Ticket;41=>DMV Form;42=>Voluntary Surrender Form;43=>Signed Transport Release;44=>Stolen Flag Notice;45=>Agent Personal Properties;46=>Customer Notification;47=>TFS NY Repo Notice;48=>Key Receipt;49=>Flatbed Receipt;50=>Self Help Receipt;51=>Personal Property Receipt;52=>Signed Personal Property Receipt;53=>Personal Property Release;54=>Personal Property Letter;470=>Customer Fee Receipt;471=>LA Parish Fee Receipt;472=>LA Sheriff Fee Receipt;473=>LA Courts Fee Receipt;474=>LA Proof of Mail Receipt",
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "AddCaseDocumentData": {
        "required": [
          "case",
          "data",
          "file_descriptions",
          "document_types"
        ],
        "type": "object",
        "properties": {
          "case": {
            "type": "integer",
            "description": "Case number",
            "example": 2149964689
          },
          "data": {
            "$ref": "#/components/schemas/ArrayOfString"
          },
          "file_descriptions": {
            "$ref": "#/components/schemas/ArrayOfString"
          },
          "document_types": {
            "type": "object",
            "description": "Defaults to Document Type 1 if not present",
            "properties": {
              "item": {
                "type": "array",
                "example": [
                  1,
                  2
                ],
                "items": {
                  "description": "This is an enumerated type. One of the values below must be used.{1=>Account Documents;2=>Agent C/R;3=>Auction C/R;4=>Auction Documents;5=>Client Assignment;6=>Impound Receipt;7=>Internal Document;8=>Personal Property;9=>Picture;10=>Redemption Release;11=>Repo Report;12=>Hold Harmless;13=>Copy of Title;14=>Copy of Contract;15=>Invoice;16=>Bankruptcy Notice;17=>Deceased Notice;18=>SCRA;36=>Lien Lost Notice;37=>Error Notice;38=>Signed Redemption Release;39=>Account Info Notice;40=>IL Recovery Ticket;41=>DMV Form;42=>Voluntary Surrender Form;43=>Signed Transport Release;44=>Stolen Flag Notice;45=>Agent Personal Properties;46=>Customer Notification;47=>TFS NY Repo Notice;48=>Key Receipt;49=>Flatbed Receipt;50=>Self Help Receipt;51=>Personal Property Receipt;52=>Signed Personal Property Receipt;53=>Personal Property Release;54=>Personal Property Letter;470=>Customer Fee Receipt;471=>LA Parish Fee Receipt;472=>LA Sheriff Fee Receipt;473=>LA Courts Fee Receipt;474=>LA Proof of Mail Receipt",
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "ArrayOfVendor": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "item": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Vendor"
                }
              }
            }
          }
        }
      },
      "RepoDetails": {
        "type": "object",
        "properties": {
          "recovery_date_time": {
            "type": "string",
            "format": "date-time"
          },
          "disposition": {
            "$ref": "#/components/schemas/DispositionString"
          },
          "collateral": {
            "$ref": "#/components/schemas/Collateral"
          },
          "recovery_address": {
            "$ref": "#/components/schemas/AddressSimple"
          },
          "police_agency": {
            "type": "string",
            "example": "10-4 PD"
          },
          "police_badge": {
            "type": "string",
            "example": "313"
          },
          "storage_location": {
            "$ref": "#/components/schemas/StorageLocationInfo"
          },
          "storage_location_space": {
            "type": "string",
            "example": "55"
          },
          "personal_items": {
            "type": "string",
            "example": ""
          },
          "has_personals": {
            "type": "boolean",
            "example": false
          },
          "storage_days": {
            "type": "integer",
            "default": 0,
            "example": 100
          },
          "additional_info": {
            "type": "string",
            "example": "additional info"
          },
          "estimated_damage": {
            "type": "integer",
            "default": 0
          },
          "is_drivable": {
            "type": "boolean",
            "example": true
          },
          "has_keys": {
            "type": "boolean",
            "example": true
          },
          "delivered_released_to": {
            "type": "integer",
            "example": ""
          },
          "police_info": {
            "$ref": "#/components/schemas/PoliceInfo"
          },
          "icra": {
            "$ref": "#/components/schemas/ICRAData"
          },
          "repo_date": {
            "type": "string",
            "format": "date"
          },
          "transport_release_date": {
            "type": "string",
            "format": "date-time"
          },
          "time_marked_repossessed": {
            "type": "string",
            "format": "date-time"
          },
          "dmv": {
            "$ref": "#/components/schemas/ArrayOfDmvInfo"
          },
          "personal_property_release_date": {
            "type": "string",
            "format": "date-time"
          },
          "has_condition_report": {
            "type": "integer",
            "default": 0
          },
          "lender_vendor_id": {
            "type": "string",
            "default": "",
            "example": "1234"
          },
          "fee_to_client": {
            "type": "number",
            "format": "float",
            "example": "100"
          },
          "account_number": {
            "type": "string",
            "example": "9448337"
          },
          "is_forwarded_case": {
            "type": "boolean"
          },
          "recovery_time_zone": {
            "type": "string",
            "example": "America/Los_Angeles"
          },
          "client_identification_notes": {
            "type": "string",
            "example": ""
          },
          "police_notified_datetime": {
            "type": "string",
            "format": "date-time"
          },
          "major_damage": {
            "type": "boolean"
          },
          "recovery_address_id": {
            "type": "integer",
            "example": "122914018"
          },
          "order_type": {
            "type": "string",
            "example": "Repossess"
          }
        }
      },
      "ArrayOfDmvInfo": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DmvInfo"
        }
      },
      "DmvInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": null
          },
          "address": {
            "type": "string",
            "example": null
          },
          "city": {
            "type": "string",
            "example": null
          },
          "state": {
            "type": "string",
            "example": null
          },
          "zip": {
            "type": "string",
            "example": null
          },
          "name": {
            "type": "string",
            "example": null
          },
          "phone": {
            "type": "string",
            "example": null
          }
        }
      },
      "Invoice": {
        "type": "object",
        "properties": {
          "invoice": {
            "type": "integer",
            "example": 107400
          }
        }
      },
      "InvoiceInfo": {
        "type": "object",
        "properties": {
          "account_number": {
            "type": "string",
            "example": "123456789"
          },
          "invoice_date": {
            "type": "string",
            "format": "date-time"
          },
          "invoice_number": {
            "type": "string",
            "example": "1122"
          },
          "vendor": {
            "$ref": "#/components/schemas/Vendor"
          },
          "lender_vendor_id": {
            "type": "string",
            "example": "ABC123456789"
          },
          "client_id": {
            "type": "integer",
            "example": 101336
          },
          "approval_date": {
            "type": "string",
            "format": "date-time"
          },
          "denial_date": {
            "type": "string",
            "format": "date-time"
          },
          "case_id": {
            "type": "integer",
            "example": 200416532
          },
          "items": {
            "$ref": "#/components/schemas/ArrayOfInvoiceItem"
          },
          "client_payments": {
            "$ref": "#/components/schemas/ArrayOfInvoiceClientPayment"
          },
          "invoice_id": {
            "type": "integer",
            "example": 107400
          },
          "invoice_status_id": {
            "type": "integer",
            "default": 0,
            "example": 2
          }
        }
      },
      "ArrayOfInvoiceItem": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/InvoiceItem"
        }
      },
      "InvoiceItem": {
        "type": "object",
        "properties": {
          "item_id": {
            "type": "integer",
            "default": 0,
            "example": 130092
          },
          "service": {
            "type": "string",
            "default": "",
            "example": "Field Visit Fee"
          },
          "rate": {
            "type": "number",
            "format": "float",
            "default": 0,
            "example": "150.00"
          },
          "taxable": {
            "type": "boolean",
            "default": false,
            "example": true
          },
          "quantity": {
            "type": "integer",
            "default": 0,
            "example": 1
          },
          "tax_rate": {
            "type": "number",
            "format": "float",
            "default": 0,
            "example": 7
          },
          "item_date": {
            "type": "string",
            "format": "date",
            "default": 0,
            "example": "2022-03-17"
          },
          "notes": {
            "type": "string",
            "default": "",
            "example": "notes"
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceItemAgentPayment"
            }
          },
          "bank_code": {
            "type": "string",
            "default": ""
          }
        }
      },
      "InvoiceItemAgentPayment": {
        "type": "object",
        "properties": {
          "payment_id": {
            "type": "integer",
            "default": 0,
            "example": 82212
          },
          "agent_id": {
            "type": "integer",
            "default": 0,
            "example": 5955
          },
          "check_number": {
            "type": "string",
            "example": ""
          },
          "agent_service": {
            "type": "integer",
            "example": ""
          },
          "amount": {
            "type": "number",
            "format": "float",
            "default": 0,
            "example": 75
          },
          "paid_date": {
            "type": "string",
            "format": "date"
          },
          "notes": {
            "type": "string",
            "default": "",
            "example": "notes"
          }
        }
      },
      "ArrayOfInvoiceClientPayment": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/InvoiceClientPayment"
        }
      },
      "InvoiceClientPayment": {
        "type": "object",
        "properties": {
          "payment_id": {
            "type": "integer",
            "default": 0
          },
          "check_number": {
            "type": "string",
            "example": ""
          },
          "amount": {
            "type": "number",
            "format": "float",
            "default": 0,
            "example": 50
          },
          "paid_date": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "GetRepoDetailsResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/RepoDetails"
              }
            ]
          }
        }
      },
      "ArrayOfInvoiceInfo": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/InvoiceInfo"
        }
      },
      "ArrayOfInvoicePDF": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/InvoicePdf"
        }
      },
      "InvoicePdf": {
        "type": "object",
        "properties": {
          "invoice_id": {
            "type": "integer",
            "example": 27868743
          },
          "invoice": {
            "type": "string",
            "example": ""
          }
        }
      },
      "InvoiceApprove": {
        "type": "object",
        "required": [
          "invoice_id"
        ],
        "properties": {
          "invoice_id": {
            "type": "integer",
            "example": 27868743
          },
          "approval_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2020-06-01 00:00:00"
          }
        }
      },
      "VendorStorages": {
        "type": "object",
        "required": [
          "udbsaid"
        ],
        "properties": {
          "udbsaid": {
            "type": "string",
            "example": 8675309
          },
          "show_approved": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "VendorApprove": {
        "type": "object",
        "required": [
          "vendor_id"
        ],
        "properties": {
          "vendor_id": {
            "type": "integer",
            "example": 8675309
          }
        }
      },
      "VendorStorageApprove": {
        "type": "object",
        "required": [
          "storage_ids",
          "vendor_id",
          "approve"
        ],
        "properties": {
          "storage_ids": {
            "$ref": "#/components/schemas/ArrayOfString"
          },
          "vendor_id": {
            "type": "integer",
            "example": 8675309
          },
          "approve": {
            "type": "boolean",
            "example": 1
          }
        }
      },
      "InvoiceDeny": {
        "type": "object",
        "required": [
          "invoice"
        ],
        "properties": {
          "invoice": {
            "type": "integer",
            "example": 27868743
          },
          "denial_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2020-06-01 00:00:00"
          },
          "reason": {
            "type": "string",
            "example": "Invoice is $100 over approved fees"
          }
        }
      },
      "ArrayOfFeeRequests": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/FeeRequests"
        }
      },
      "FeeRequests": {
        "type": "object",
        "properties": {
          "fee_id": {
            "type": "integer",
            "example": 331573
          },
          "case_id": {
            "type": "integer",
            "example": 2071810710
          },
          "fee_amount": {
            "type": "string",
            "example": "$10.00"
          },
          "fee_type": {
            "type": "string",
            "example": 25697799
          },
          "fee_type_label": {
            "type": "string",
            "example": "Involuntary Repossession Fee"
          },
          "fee_added": {
            "type": "string",
            "format": "date-time"
          },
          "fee_status": {
            "type": "string",
            "example": "Pending Approval"
          },
          "fee_user": {
            "type": "integer",
            "example": 12228
          },
          "fee_comments": {
            "$ref": "#/components/schemas/ArrayOfFeeComment"
          },
          "bank_code": {
            "type": "string",
            "example": "AB123"
          }
        }
      },
      "FeeComment": {
        "type": "object",
        "properties": {
          "fee_comment_id": {
            "type": "integer",
            "example": 584565
          },
          "fee_comment_added": {
            "type": "string",
            "format": "date-time"
          },
          "fee_comment": {
            "type": "string",
            "example": "test"
          },
          "fee_comment_name": {
            "type": "string",
            "example": "1 RDN Demo (Travis) (Gross) (User)"
          },
          "fee_comment_user": {
            "type": "integer",
            "example": 12228
          }
        }
      },
      "ArrayOfFeeComment": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/FeeComment"
        }
      },
      "ChangeFeeStatus": {
        "required": [
          "case_id",
          "fee_id",
          "status"
        ],
        "type": "object",
        "properties": {
          "case_id": {
            "type": "integer",
            "format": "int32",
            "example": 2070445349
          },
          "fee_id": {
            "type": "integer",
            "format": "int32",
            "example": 33330
          },
          "status": {
            "$ref": "#/components/schemas/FeeApprovalType"
          },
          "custom_comment": {
            "type": "string",
            "example": "Additional comment"
          }
        }
      },
      "FeeApprovalType": {
        "type": "integer",
        "description": "This is an enumerated type. One of the values below must be used. 2=> Approved, 3=>Denied",
        "example": 2
      },
      "AccountNumbers": {
        "required": [
          "accountNumbers"
        ],
        "type": "object",
        "properties": {
          "accountNumbers": {
            "type": "object",
            "properties": {
              "item": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ArrayOfString"
                  },
                  {
                    "example": [
                      "12312312341",
                      "12312312342"
                    ]
                  }
                ]
              }
            }
          }
        }
      },
      "InputStrings": {
        "type": "object",
        "properties": {
          "strings": {
            "$ref": "#/components/schemas/ArrayOfString"
          }
        }
      },
      "ArrayOfString": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "ArrayOfAccountToCases": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/AccountToCases"
        }
      },
      "AccountToCases": {
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "string",
            "example": 12312312341,
            "description": "Account Number"
          },
          "cases": {
            "$ref": "#/components/schemas/ArrayOfRdnCase"
          }
        }
      },
      "ArrayOfRdnCase": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/RdnCase"
        }
      },
      "RdnCase": {
        "type": "object",
        "properties": {
          "case_id": {
            "type": "integer",
            "format": "int32",
            "example": 2070445349,
            "description": "Case ID"
          }
        }
      },
      "CaseDocument": {
        "type": "object",
        "properties": {
          "document_id": {
            "type": "integer"
          }
        }
      },
      "ArrayOfComplaint": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Complaint"
        }
      },
      "Complaint": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 9035768,
            "description": "Complaint ID"
          },
          "case_id": {
            "type": "integer",
            "format": "int32",
            "example": 2070445349,
            "description": "Case ID"
          },
          "complaint_status_id": {
            "$ref": "#/components/schemas/ComplaintStatus"
          },
          "complaint_type_id": {
            "$ref": "#/components/schemas/ComplaintType"
          },
          "complaint_initiator_id": {
            "type": "integer"
          },
          "complaint_initiator_other": {
            "type": "string",
            "example": "Other"
          },
          "organization_id": {
            "$ref": "#/components/schemas/ComplaintOrganization"
          },
          "organization_other": {
            "type": "string",
            "example": "Other"
          },
          "vendor": {
            "$ref": "#/components/schemas/CompanySimple"
          },
          "assigned_vendor": {
            "$ref": "#/components/schemas/CompanySimple"
          },
          "lender": {
            "$ref": "#/components/schemas/CompanySimple"
          },
          "is_high_profile": {
            "type": "boolean",
            "example": 1
          },
          "description": {
            "type": "string",
            "example": "Description of complaint"
          },
          "submitted_by": {
            "type": "string",
            "example": "Johnny Appleseed"
          },
          "complaint_method_received_id": {
            "$ref": "#/components/schemas/ComplaintMethodReceived"
          },
          "received_at": {
            "type": "string",
            "format": "date",
            "example": "1990-06-01",
            "default": null
          },
          "resolved_by_user_type": {
            "type": "integer"
          },
          "resolved_by_user_id": {
            "type": "integer",
            "example": 867
          },
          "resolved_at": {
            "type": "string",
            "format": "date",
            "example": "1990-06-01",
            "default": null
          },
          "customer_acknowledged_at": {
            "type": "string",
            "format": "date",
            "example": "1990-06-01",
            "default": null
          },
          "created_by_user_type": {
            "type": "string"
          },
          "created_by_user_id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2020-06-01T00:00:00.000Z",
            "default": null
          },
          "comment_count": {
            "type": "integer"
          },
          "document_count": {
            "type": "integer"
          }
        }
      },
      "ComplaintStatus": {
        "description": "This is an enumerated type. One of the values below must be used. 1=>Resolved, 2=>Pending Debtor Action, 3=>Pending Agent Action, 4=>Pending",
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "example": 2,
            "enum": [
              1,
              2,
              3,
              4
            ]
          }
        }
      },
      "ComplaintType": {
        "description": "This is an enumerated type. One of the values below must be used. 1=>Breach of Peace, 2=>Cease and Desist Violation, 3=>Damage to Unit, 4=>Damage to Property, 5=>Personal Property, 6=>Physical Altercation, 7=>Repossession Dispute, 8=>Stolen Unit, 9=>Unethical Behavior, 11=>Customer Service, 12=>Misrepresentation",
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "example": 11,
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              11,
              12
            ]
          }
        }
      },
      "ComplaintOrganization": {
        "description": "This is an enumerated type. One of the values below must be used. 1=>N/A, 2=>OCC, 3=>CFPB, 4=>Congressional Inquiries, 5=>Attorney General, 6=>BBB, 7=>Court, 8=>Media, 9=>Other",
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "example": 7,
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9
            ]
          }
        }
      },
      "CompanySimple": {
        "type": "object",
        "required": [
          "company_id",
          "name"
        ],
        "properties": {
          "company_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ComplaintMethodReceived": {
        "description": "This is an enumerated type. One of the values below must be used. 1=>Phone, 2=>Email, 3=>Mail, 4=>Fax, 5=>In Person",
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "example": 3,
            "enum": [
              1,
              2,
              3,
              4,
              5
            ]
          }
        }
      },
      "ApprovedVendorsCoveringState": {
        "type": "object",
        "required": [
          "state_abbreviation"
        ],
        "properties": {
          "state_abbreviation": {
            "type": "string",
            "example": "AK"
          }
        }
      },
      "ApprovedVendorsCoveringZip": {
        "type": "object",
        "required": [
          "zip"
        ],
        "properties": {
          "zip": {
            "type": "string",
            "example": 89523
          }
        }
      },
      "ApprovedVendorsCoveringZipExtended": {
        "type": "object",
        "required": [
          "zip"
        ],
        "properties": {
          "zip": {
            "type": "string",
            "example": 89523
          }
        }
      },
      "ResultVendorData": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "item": {
                "$ref": "#/components/schemas/ArrayOfVendorData"
              }
            }
          }
        }
      },
      "ArrayOfVendorData": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/VendorData"
        }
      },
      "VendorData": {
        "type": "object",
        "properties": {
          "repo_rate": {
            "type": "integer",
            "description": "Repossession rate"
          },
          "avg_recovery_days": {
            "type": "string",
            "example": "1",
            "description": "Average recovery days"
          },
          "distance": {
            "type": "integer",
            "description": "Distance from a specified zip code"
          },
          "fee_schedule": {
            "type": "object",
            "properties": {
              "item": {
                "$ref": "#/components/schemas/ArrayOfFeeschedule"
              }
            }
          },
          "is_limited_user": {
            "type": "boolean",
            "example": false
          },
          "is_skip": {
            "type": "boolean",
            "example": false
          },
          "is_national": {
            "type": "boolean",
            "example": false
          },
          "vendor_recovery_percentage_goal": {
            "type": "number",
            "format": "float",
            "example": 0.75,
            "description": "The recovery rate defined by the client"
          },
          "vendor_recovery_percentage_real": {
            "type": "number",
            "format": "float",
            "example": 0.08,
            "description": "The recovery rate determined by repos/new orders"
          },
          "license_expirations": {
            "$ref": "#/components/schemas/ArrayOfLabeledDate"
          },
          "scorecard": {
            "$ref": "#/components/schemas/ScorecardScore"
          },
          "lpr2_assignments_only": {
            "type": "boolean",
            "example": false
          },
          "vendor_id": {
            "type": "string",
            "example": "AZ123456789"
          },
          "name": {
            "type": "string",
            "example": "1 RDN Demo",
            "description": "Vendor Name"
          },
          "address": {
            "type": "string",
            "example": "1620 S Stapley Dr",
            "description": "Vendor address"
          },
          "city": {
            "type": "string",
            "example": "Mesa",
            "description": "Vendor city"
          },
          "state": {
            "type": "string",
            "example": "AZ",
            "description": "Vendor state"
          },
          "zip_code": {
            "type": "string",
            "example": "85204",
            "description": "Vendor zip"
          },
          "phone": {
            "type": "string",
            "example": "9999999999",
            "description": "Vendor phone"
          },
          "fax": {
            "type": "string",
            "example": "999-999-9999",
            "description": "Vendor fax"
          },
          "is_beta_company": {
            "type": "boolean",
            "example": false
          },
          "memberships": {
            "$ref": "#/components/schemas/VendorMemberships"
          },
          "state_license_number": {
            "type": "string"
          }
        }
      },
      "VendorCoverageAreas": {
        "type": "object",
        "properties": {
          "vendors": {
            "$ref": "#/components/schemas/ArrayOfVendorCoverageArea"
          }
        }
      },
      "ArrayOfVendorCoverageArea": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/VendorCoverageArea"
        }
      },
      "VendorCoverageArea": {
        "type": "object",
        "properties": {
          "vendor": {
            "$ref": "#/components/schemas/Vendor"
          },
          "zip_codes": {
            "$ref": "#/components/schemas/ArrayOfString"
          }
        }
      },
      "VendorId": {
        "type": "object",
        "properties": {
          "vendor_id": {
            "type": "string"
          }
        }
      },
      "ResultVendorDataExtended": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "item": {
                "$ref": "#/components/schemas/ArrayOfVendorDataExtended"
              }
            }
          }
        }
      },
      "ArrayOfVendorDataExtended": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/VendorDataExtended"
        }
      },
      "VendorDataExtended": {
        "type": "object",
        "properties": {
          "repo_rate": {
            "type": "integer",
            "description": "Repossession rate"
          },
          "avg_recovery_days": {
            "type": "string",
            "example": "1",
            "description": "Average recovery days"
          },
          "distance": {
            "type": "integer",
            "description": "Distance from a specified zip code"
          },
          "fee_schedule": {
            "type": "object",
            "properties": {
              "item": {
                "$ref": "#/components/schemas/ArrayOfFeeschedule"
              }
            }
          },
          "is_limited_user": {
            "type": "boolean",
            "example": false
          },
          "is_skip": {
            "type": "boolean",
            "example": false
          },
          "is_national": {
            "type": "boolean",
            "example": false
          },
          "vendor_recovery_percentage_goal": {
            "type": "number",
            "format": "float",
            "example": 0.75,
            "description": "The recovery rate defined by the client"
          },
          "vendor_recovery_percentage_real": {
            "type": "number",
            "format": "float",
            "example": 0.08,
            "description": "The recovery rate determined by repos/new orders"
          },
          "license_expirations": {
            "$ref": "#/components/schemas/ArrayOfLabeledDate"
          },
          "scorecard": {
            "$ref": "#/components/schemas/ScorecardScore"
          },
          "lpr2_assignments_only": {
            "type": "boolean",
            "example": false
          },
          "vendor_id": {
            "type": "string",
            "example": "AZ123456789"
          },
          "name": {
            "type": "string",
            "example": "1 RDN Demo",
            "description": "Vendor Name"
          },
          "address": {
            "type": "string",
            "example": "1620 S Stapley Dr",
            "description": "Vendor address"
          },
          "city": {
            "type": "string",
            "example": "Mesa",
            "description": "Vendor city"
          },
          "state": {
            "type": "string",
            "example": "AZ",
            "description": "Vendor state"
          },
          "zip_code": {
            "type": "string",
            "example": "85204",
            "description": "Vendor zip"
          },
          "phone": {
            "type": "string",
            "example": "9999999999",
            "description": "Vendor phone"
          },
          "fax": {
            "type": "string",
            "example": "999-999-9999",
            "description": "Vendor fax"
          },
          "is_beta_company": {
            "type": "boolean",
            "example": false
          },
          "memberships": {
            "$ref": "#/components/schemas/VendorMemberships"
          },
          "state_license_number": {
            "type": "string"
          },
          "zip_code_of_used_branch": {
            "type": "integer",
            "example": 86753
          }
        }
      },
      "ArrayOfFeeschedule": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Feeschedule"
        }
      },
      "Feeschedule": {
        "type": "object",
        "properties": {
          "fee_id": {
            "type": "string",
            "example": "25577208"
          },
          "fee": {
            "type": "string",
            "example": "Cash"
          },
          "rate": {
            "type": "integer",
            "example": 84
          },
          "is_taxable": {
            "type": "boolean",
            "example": false
          },
          "tax_rate": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "ArrayOfLabeledDate": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/LabeledDate"
        }
      },
      "ScorecardScore": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is an enumerated type. One of the values below must be used.",
            "example": "A",
            "enum": [
              "A",
              "B",
              "C",
              "D",
              "F"
            ]
          }
        }
      },
      "LabeledDate": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "default": "name",
            "example": "bond"
          },
          "date": {
            "type": "string",
            "format": "date",
            "default": "0000-00-00",
            "example": "2018-03-23"
          }
        }
      },
      "AddPhoneNumber": {
        "type": "object",
        "required": [
          "case_id",
          "number"
        ],
        "properties": {
          "case_id": {
            "type": "integer",
            "format": "int32",
            "example": 2070445349,
            "description": "Case ID"
          },
          "number": {
            "type": "string",
            "example": "9999999999",
            "description": "Phone Number"
          },
          "type": {
            "$ref": "#/components/schemas/PhoneType"
          },
          "flag": {
            "$ref": "#/components/schemas/PhoneFlag"
          },
          "party_type": {
            "$ref": "#/components/schemas/PhonePartyType"
          },
          "name": {
            "type": "string",
            "default": ""
          }
        }
      },
      "PhoneType": {
        "type": "integer",
        "description": "This is an enumerated type. One of the values below must be used. 1=>Home, 2=>Work, 4=>Alternate",
        "example": 2,
        "enum": [
          1,
          2,
          4
        ]
      },
      "PhoneFlag": {
        "type": "integer",
        "description": "This is an enumerated type. One of the values below must be used. 1=>Cease, 2=>Good, 3=>Bad, 4=>Wrong, 5=>Special Handling",
        "example": 2,
        "enum": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "PhonePartyType": {
        "type": "integer",
        "description": "This is an enumerated type. One of the values below must be used. 1=>Borrower, 2=>Co-Borrower, 3=>Authorized 3rd Party, 4=>Unauthorized 3rd Party",
        "example": 1,
        "enum": [
          1,
          2,
          3,
          4
        ]
      },
      "ArrayOfCollectorInfo": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CollectorInfo"
        }
      },
      "ProcessedItemsResponse": {
        "type": "object",
        "properties": {
          "case_ids": {
            "$ref": "#/components/schemas/ArrayOfInt"
          },
          "errors": {
            "$ref": "#/components/schemas/ArrayOfString"
          }
        }
      },
      "CollectorInfo": {
        "type": "object",
        "properties": {
          "collector_id": {
            "type": "integer",
            "default": 0,
            "example": 123456,
            "description": "Collector's ID"
          },
          "first_name": {
            "type": "string",
            "default": "",
            "example": "FirstName",
            "description": "Collector's first name"
          },
          "last_name": {
            "type": "string",
            "default": "",
            "example": "LastName",
            "description": "Collector's last name"
          },
          "email": {
            "type": "string",
            "default": "",
            "example": "test@test.com",
            "description": "Collector's email"
          }
        }
      },
      "ArrayOfInvoiceClientService": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/InvoiceClientService"
        }
      },
      "InvoiceClientService": {
        "type": "object",
        "properties": {
          "invoice_client_base_service_id": {
            "type": "string",
            "description": "Invoice Service ID"
          },
          "service": {
            "type": "string",
            "description": "Invoice Service"
          },
          "rate": {
            "type": "number",
            "description": "Service's rate"
          },
          "taxable": {
            "type": "boolean",
            "example": 0,
            "description": "Is service taxable?"
          },
          "order_type": {
            "type": "integer",
            "example": 3
          },
          "service_type": {
            "type": "integer",
            "example": 1
          },
          "bank_code": {
            "type": "string"
          }
        }
      },
      "InvoiceServiceOrderType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "default": 3,
            "example": 3
          }
        }
      },
      "InvoiceServiceType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "default": 1,
            "example": 1
          }
        }
      },
      "GetInvoiceAsPdfResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/InvoicePdf"
          }
        }
      },
      "DispositionString": {
        "type": "string",
        "example": "Stored",
        "enum": [
          "Stored",
          "Del To Auction",
          "Del To Client",
          "Del To Dealer",
          "Del To Debtor",
          "Del To Other",
          "In Auction",
          "Redemption Hold",
          "Rel To Auction",
          "Rel To Client",
          "Rel To Dealer",
          "Rel To Debtor",
          "Rel To Other",
          "RO Redeemed",
          "Sold In Auction",
          "I/P",
          "CD Transport",
          "CD Redemption",
          "CD Delivery"
        ]
      }
    },
    "securitySchemes": {
      "apiKeyHeader": {
        "type": "apiKey",
        "name": "api-key",
        "in": "header"
      }
    }
  }
}